{
    "consumes": [],
    "definitions": {
        "AddExistingFaceToWlItemData": {
            "description": "Data required for adding cloned face to WatchlistItem.",
            "properties": {
                "FaceId": {
                    "description": "FaceId to clone.",
                    "format": "int64",
                    "type": "integer"
                },
                "WatchlistItemId": {
                    "description": "WatchlistItem Id that cloned face will be linked to.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "FaceId",
                "WatchlistItemId"
            ],
            "type": "object"
        },
        "BulkResponseData": {
            "description": "Response data model for bulk operations.",
            "properties": {
                "Id": {
                    "description": "Id of not deleted photo, in case of error.",
                    "format": "int64",
                    "type": "integer"
                },
                "OpResult": {
                    "description": "Reason why photo with Id could not be deleted.",
                    "enum": [
                        "NotFound",
                        "Error"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "OpResult"
            ],
            "type": "object"
        },
        "Camera": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "StreamId": {
                    "format": "int64",
                    "type": "integer"
                },
                "StreamWorkerId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "VideoPublishWorkerId": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "Id",
                "StreamId",
                "StreamWorkerId",
                "VideoPublishWorkerId",
                "CreatedAt"
            ],
            "type": "object"
        },
        "Config": {
            "properties": {
                "Configuration": {
                    "type": "string"
                },
                "Context": {
                    "type": "string"
                },
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "Context",
                "Name",
                "Configuration",
                "CreatedAt"
            ],
            "type": "object"
        },
        "Face": {
            "properties": {
                "Age": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "CropLeftBottomX": {
                    "format": "double",
                    "type": "number"
                },
                "CropLeftBottomY": {
                    "format": "double",
                    "type": "number"
                },
                "CropLeftTopX": {
                    "format": "double",
                    "type": "number"
                },
                "CropLeftTopY": {
                    "format": "double",
                    "type": "number"
                },
                "CropRightBottomX": {
                    "format": "double",
                    "type": "number"
                },
                "CropRightBottomY": {
                    "format": "double",
                    "type": "number"
                },
                "CropRightTopX": {
                    "format": "double",
                    "type": "number"
                },
                "CropRightTopY": {
                    "format": "double",
                    "type": "number"
                },
                "Gender": {
                    "format": "double",
                    "type": "number"
                },
                "GenderFormatted": {
                    "enum": [
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "ImageDataId": {
                    "format": "uuid",
                    "type": "string"
                },
                "ImageUrl": {
                    "type": "string"
                },
                "LeftEyeX": {
                    "format": "double",
                    "type": "number"
                },
                "LeftEyeY": {
                    "format": "double",
                    "type": "number"
                },
                "PersonId": {
                    "format": "int64",
                    "type": "integer"
                },
                "PhotoId": {
                    "format": "int64",
                    "type": "integer"
                },
                "ProcessedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Quality": {
                    "format": "int32",
                    "type": "integer"
                },
                "RightEyeX": {
                    "format": "double",
                    "type": "number"
                },
                "RightEyeY": {
                    "format": "double",
                    "type": "number"
                },
                "State": {
                    "enum": [
                        "New",
                        "Extracting",
                        "Extracted",
                        "Error"
                    ],
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "PersonId",
                "Quality",
                "State",
                "CreatedAt",
                "CropLeftTopX",
                "CropLeftTopY",
                "CropRightTopX",
                "CropRightTopY",
                "CropLeftBottomX",
                "CropLeftBottomY",
                "CropRightBottomX",
                "CropRightBottomY",
                "PhotoId",
                "Id",
                "GenderFormatted"
            ],
            "type": "object"
        },
        "FaceAttribute": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "FaceAttributeType": {
                    "enum": [
                        "Age",
                        "Gender"
                    ],
                    "type": "string"
                },
                "FaceId": {
                    "format": "int64",
                    "type": "integer"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Value": {
                    "format": "double",
                    "type": "number"
                },
                "ValueFormatted": {
                    "type": "string"
                }
            },
            "required": [
                "FaceId",
                "FaceAttributeType",
                "Value",
                "CreatedAt",
                "Id"
            ],
            "type": "object"
        },
        "Grouping": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "IsDefault": {
                    "type": "boolean"
                },
                "LastProcessedPersonId": {
                    "format": "int64",
                    "type": "integer"
                },
                "NextIterationTimeStamp": {
                    "format": "date-time",
                    "type": "string"
                },
                "ProcessedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "ScopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "State": {
                    "enum": [
                        "Ready",
                        "Processing",
                        "Pending",
                        "Error"
                    ],
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "ScopeId",
                "CreatedAt",
                "State",
                "IsDefault"
            ],
            "type": "object"
        },
        "Identity": {
            "properties": {
                "BestFaceId": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "CreatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "EntranceTime": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "ExitTime": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "GroupingId": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "Hidden": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "GroupingId",
                "CreatedAt",
                "Hidden",
                "BestFaceId"
            ],
            "type": "object"
        },
        "ImageData": {
            "properties": {},
            "required": [],
            "type": "object"
        },
        "InputFile": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "State": {
                    "enum": [
                        "Ready",
                        "Processing",
                        "Processed",
                        "Error"
                    ],
                    "type": "string"
                },
                "StreamId": {
                    "format": "int64",
                    "type": "integer"
                },
                "StreamWorkerId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "VideoPublishWorkerId": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "Id",
                "StreamId",
                "StreamWorkerId",
                "VideoPublishWorkerId",
                "State",
                "CreatedAt"
            ],
            "type": "object"
        },
        "ODataResponse[Int64]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[BulkResponseData]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/BulkResponseData"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Camera]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Camera"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Config]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Config"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Face]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Face"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Grouping]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Grouping"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Identity]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Identity"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[InputFile]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/InputFile"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Person]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Person"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Photo]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Photo"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Scope]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Scope"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Service]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Service"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Stream]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Stream"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Watchlist]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Watchlist"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[WlHit]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/WlHit"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[WlItem]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/WlItem"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "ODataResponse[List[Worker]]": {
            "properties": {
                "@odata.context": {
                    "type": "string"
                },
                "value": {
                    "items": {
                        "$ref": "#/definitions/Worker"
                    },
                    "type": "array"
                }
            },
            "required": [],
            "type": "object"
        },
        "Person": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "ScopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "StreamId": {
                    "format": "int64",
                    "type": "integer"
                },
                "TimeAppeared": {
                    "format": "date-time",
                    "type": "string"
                },
                "TimeDisappeared": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "ScopeId",
                "CreatedAt",
                "TimeAppeared",
                "Id"
            ],
            "type": "object"
        },
        "Photo": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "ImageDataId": {
                    "format": "uuid",
                    "type": "string"
                },
                "ImageUrl": {
                    "type": "string"
                },
                "ReceivedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "ScopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "State": {
                    "enum": [
                        "New",
                        "Processing",
                        "Processed",
                        "Error"
                    ],
                    "type": "string"
                },
                "StreamId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "State",
                "ScopeId",
                "CreatedAt",
                "Id"
            ],
            "type": "object"
        },
        "PhotoData": {
            "description": "Model of photo with data in it",
            "properties": {
                "Data": {
                    "description": "Raw image data.",
                    "format": "byte",
                    "type": "string"
                },
                "ScopeId": {
                    "description": "Scope identifier.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "Data",
                "ScopeId"
            ],
            "type": "object"
        },
        "Ping": {
            "description": "Represents information about SmartFace version.",
            "properties": {
                "AssemblyLastModifiedTime": {
                    "description": "Gets or sets the assembly last modified time.",
                    "format": "date-time",
                    "type": "string"
                },
                "AssemblyVersion": {
                    "description": "Gets or sets the assembly version.",
                    "type": "string"
                },
                "DatabaseVersion": {
                    "description": "Gets or sets the database version.",
                    "type": "string"
                },
                "DatabaseVersionCreationTime": {
                    "description": "Gets or sets the database version creation time.",
                    "format": "date-time",
                    "type": "string"
                },
                "DatabaseVersionUpdatedTime": {
                    "description": "Gets or sets the database version updated time.",
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "description": "Gets or sets the identifier.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "Id",
                "DatabaseVersion",
                "DatabaseVersionCreationTime",
                "DatabaseVersionUpdatedTime",
                "AssemblyVersion",
                "AssemblyLastModifiedTime"
            ],
            "type": "object"
        },
        "RegisterWlItemData": {
            "properties": {
                "ExternalId": {
                    "type": "string"
                },
                "ImageData": {
                    "items": {
                        "$ref": "#/definitions/RegisterWlItemImageData"
                    },
                    "type": "array"
                },
                "WatchlistExternalIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "ExternalId",
                "ImageData",
                "WatchlistExternalIds"
            ],
            "type": "object"
        },
        "RegisterWlItemImageData": {
            "properties": {
                "Data": {
                    "format": "byte",
                    "type": "string"
                },
                "MIME": {
                    "pattern": "image\\/(png|jpeg)",
                    "type": "string"
                }
            },
            "required": [
                "Data",
                "MIME"
            ],
            "type": "object"
        },
        "RemoveExistingFaceFromWlItemData": {
            "description": "Data required for removing face from WatchlistItem.",
            "properties": {
                "FaceId": {
                    "description": "FaceId to remove.",
                    "format": "int64",
                    "type": "integer"
                },
                "WatchlistItemId": {
                    "description": "WatchlistItem Id that face should be removed from.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "FaceId",
                "WatchlistItemId"
            ],
            "type": "object"
        },
        "Scope": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "Type": {
                    "enum": [
                        "Event",
                        "Location",
                        "Watchlist"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "Type",
                "CreatedAt"
            ],
            "type": "object"
        },
        "ScopeData": {
            "description": "Model data for Scope creation.",
            "properties": {
                "Description": {
                    "description": "Description of Scope.",
                    "type": "string"
                },
                "Type": {
                    "description": "Type of scope.",
                    "enum": [
                        "Event",
                        "Location",
                        "Watchlist"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ],
            "type": "object"
        },
        "ScopeState": {
            "description": "Copy of ProgressMessageDTO",
            "properties": {
                "NumNewPhotos": {
                    "description": "Gets or sets the number new photos.",
                    "format": "int32",
                    "type": "integer"
                },
                "NumUnprocPhotos": {
                    "description": "Gets or sets the number unproc photos.",
                    "format": "int32",
                    "type": "integer"
                },
                "ScopeId": {
                    "description": "Gets or sets the scope identifier.",
                    "format": "int64",
                    "type": "integer"
                },
                "Status": {
                    "description": "Gets or sets the grouping status.",
                    "enum": [
                        "Processing",
                        "Ready"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "ScopeId",
                "NumNewPhotos",
                "NumUnprocPhotos",
                "Status"
            ],
            "type": "object"
        },
        "Service": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "NodeName": {
                    "type": "string"
                },
                "ServiceName": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "ServiceName",
                "NodeName",
                "CreatedAt"
            ],
            "type": "object"
        },
        "Stream": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "ScopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "ScopeId",
                "CreatedAt"
            ],
            "type": "object"
        },
        "StreamSourceData": {
            "description": "Camera data required for camera creation.",
            "properties": {
                "Enable": {
                    "description": "Value indicating whether this Camera workers should be enabled after creation.",
                    "type": "boolean"
                },
                "ScopeId": {
                    "description": "ScopeId for Camera.",
                    "format": "int64",
                    "type": "integer"
                },
                "VideoSource": {
                    "description": "Camera video source.",
                    "type": "string"
                }
            },
            "required": [
                "ScopeId",
                "VideoSource",
                "Enable"
            ],
            "type": "object"
        },
        "UpdateConfigValueData": {
            "description": "Wrapper class for updating of configuration property.",
            "properties": {
                "Context": {
                    "description": "Gets or sets the context.",
                    "type": "string"
                },
                "Name": {
                    "description": "Gets or sets the name.",
                    "type": "string"
                },
                "Property": {
                    "description": "Gets or sets the property.",
                    "type": "string"
                },
                "Value": {
                    "description": "Gets or sets the value.",
                    "type": "string"
                }
            },
            "required": [
                "Name",
                "Context",
                "Property",
                "Value"
            ],
            "type": "object"
        },
        "Watchlist": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "DisplayName": {
                    "type": "string"
                },
                "ExternalId": {
                    "readOnly": true,
                    "type": "string"
                },
                "FullName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "Threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "DisplayName",
                "FullName",
                "CreatedAt",
                "Threshold"
            ],
            "type": "object"
        },
        "WatchlistData": {
            "description": "Model for creation of new Watchlist.",
            "properties": {
                "DisplayName": {
                    "description": "DisplayName of Watchlist.",
                    "type": "string"
                },
                "ExternalId": {
                    "description": "Gets or sets the external identifier.",
                    "type": "string"
                },
                "FullName": {
                    "description": "FullName of new Watchlist.",
                    "type": "string"
                },
                "Threshold": {
                    "description": "Threshold of new Watchlist.",
                    "format": "int32",
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "required": [
                "DisplayName",
                "FullName"
            ],
            "type": "object"
        },
        "WatchlistItemCreateData": {
            "description": "Model for creation of new WlItem.",
            "properties": {
                "DisplayName": {
                    "description": "Gets or sets the display name.",
                    "maxLength": 200,
                    "minLength": 0,
                    "type": "string"
                },
                "ExternalId": {
                    "description": "Gets or sets the external identifier.",
                    "maxLength": 100,
                    "minLength": 0,
                    "type": "string"
                },
                "FullName": {
                    "description": "Gets or sets the full name.",
                    "maxLength": 200,
                    "minLength": 0,
                    "type": "string"
                },
                "Note": {
                    "description": "Gets or sets the note.",
                    "type": "string"
                }
            },
            "required": [],
            "type": "object"
        },
        "WlHit": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "PersonId": {
                    "format": "int64",
                    "type": "integer"
                },
                "Score": {
                    "format": "int32",
                    "type": "integer"
                },
                "StreamId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "WatchlistDisplayName": {
                    "type": "string"
                },
                "WatchlistExternalId": {
                    "type": "string"
                },
                "WatchlistFullName": {
                    "type": "string"
                },
                "WatchlistId": {
                    "format": "int64",
                    "type": "integer"
                },
                "WlItemDisplayName": {
                    "type": "string"
                },
                "WlItemExternalId": {
                    "type": "string"
                },
                "WlItemFullName": {
                    "type": "string"
                },
                "WlItemId": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "Id",
                "WatchlistId",
                "WlItemId",
                "StreamId",
                "Score",
                "CreatedAt",
                "PersonId",
                "WatchlistFullName",
                "WatchlistDisplayName"
            ],
            "type": "object"
        },
        "WlItem": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                },
                "DisplayName": {
                    "type": "string"
                },
                "ExternalId": {
                    "type": "string"
                },
                "FullName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "Note": {
                    "type": "string"
                },
                "PersonId": {
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "CreatedAt",
                "PersonId"
            ],
            "type": "object"
        },
        "Worker": {
            "properties": {
                "CreatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int64",
                    "type": "integer"
                },
                "ServiceId": {
                    "format": "int64",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "WorkerType": {
                    "enum": [
                        "ContinuousGroupingWorker",
                        "GroupingWorker",
                        "DataDistributionWorker",
                        "ProgressInfoWorker",
                        "DetectFaceWorker",
                        "ExtractFaceWorker",
                        "StreamWorker",
                        "VideoPublishWorker",
                        "DbCleanupWorker",
                        "StillPictureDatabaseWorker",
                        "StreamDataDbWorker"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Id",
                "Enabled",
                "WorkerType",
                "Description",
                "ServiceId",
                "CreatedAt"
            ],
            "type": "object"
        }
    },
    "host": "ui-sfacedev-1w:8099",
    "info": {
        "title": "SmartFace",
        "version": "3_1_0_1183"
    },
    "parameters": {},
    "paths": {
        "/odata/Cameras": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Cameras_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Camera]]"
                        }
                    }
                },
                "summary": "Gets list of all Cameras present on the server.",
                "tags": [
                    "Cameras"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "Cameras_Post",
                "parameters": [
                    {
                        "description": "The entity to post",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StreamSourceData"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Camera created",
                        "schema": {
                            "$ref": "#/definitions/Camera"
                        }
                    }
                },
                "summary": "Creates a new Camera.",
                "tags": [
                    "Cameras"
                ]
            }
        },
        "/odata/Cameras({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Cameras_DeleteById",
                "parameters": [
                    {
                        "description": "Id of Camera that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the Camera.",
                "tags": [
                    "Cameras"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Cameras_GetById",
                "parameters": [
                    {
                        "description": "Id of Camera which is requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Camera"
                        }
                    }
                },
                "summary": "Gets the specified Camera.",
                "tags": [
                    "Cameras"
                ]
            }
        },
        "/odata/Configs": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Configs_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Config]]"
                        }
                    }
                },
                "summary": "Gets list of all Configurations present on the server.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs(Name={Name},Context={Context})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "description": "Both [name] and [context] parameters must be quoted with single quotes('') because they are string values !",
                "operationId": "Configs_GetByNameAndContext",
                "parameters": [
                    {
                        "description": "Name of requested Configuration.",
                        "in": "path",
                        "name": "Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Context of requested configuration.",
                        "in": "path",
                        "name": "Context",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Config"
                        }
                    }
                },
                "summary": "Gets the specified Configuration by compound key.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Action.Create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Creates new Configuration from valid XML string with provided Name and Context.",
                "operationId": "Configs_Create",
                "parameters": [
                    {
                        "description": "JSON with Name, Context and Config as XML string of Configuration that will be created.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Configuration": {
                                    "type": "string"
                                },
                                "Context": {
                                    "type": "string"
                                },
                                "Name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name",
                                "Context",
                                "Configuration"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Configuration created",
                        "schema": {
                            "$ref": "#/definitions/Config"
                        }
                    }
                },
                "summary": "Creates new Configuration.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Action.CreateDefault": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Creates new Configuration XML record by provided Context and Name with default values.",
                "operationId": "Configs_CreateDefault",
                "parameters": [
                    {
                        "description": "JSON with Name and Context of Configuration that will be created.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Context": {
                                    "type": "string"
                                },
                                "Name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name",
                                "Context"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Configuration created.",
                        "schema": {
                            "$ref": "#/definitions/Config"
                        }
                    }
                },
                "summary": "Creates new Configuration with default values.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Action.Delete": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Deletes Configuration with provided Name and Context.",
                "operationId": "Configs_Delete",
                "parameters": [
                    {
                        "description": "JSON with Name and Context of Configuration that will be deleted.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Context": {
                                    "type": "string"
                                },
                                "Name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name",
                                "Context"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified Configuration.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Action.SetConfigValue": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Updates value of Property of Configuration with provided Name and Context with provided Value. Note that Value parameter can be of any data type, not only string !",
                "operationId": "Configs_SetConfigValue",
                "parameters": [
                    {
                        "description": "JSON with Name, Context, Property and Value of Configuration property that will be updated.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Context": {
                                    "type": "string"
                                },
                                "Name": {
                                    "type": "string"
                                },
                                "Property": {
                                    "type": "string"
                                },
                                "Value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name",
                                "Context",
                                "Property",
                                "Value"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated successfully"
                    },
                    "400": {
                        "description": "Configuration property name or value is invalid."
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Updates the specified Configuration value.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Action.SetConfigValues": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Update multiple configuration properties in one call. Note that Value parameter can be of any data type, not only string !",
                "operationId": "Configs_SetConfigValues",
                "parameters": [
                    {
                        "description": "JSON object with array of [Name, Context, Property, Value] objects that will be updated.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "ConfigValues": {
                                    "items": {
                                        "$ref": "#/definitions/UpdateConfigValueData"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "ConfigValues"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated successfully"
                    },
                    "400": {
                        "description": "Configuration property name or value is invalid."
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Updates the specified Configuration values.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Configs/Function.GetConfigValues(name='{name}',context='{context}')": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "description": "Transforms XML Configuration string into JSON array of objects that consists from PropertyName and PropertyValue.",
                "operationId": "Configs_GetConfigValuesByNameAndContext",
                "parameters": [
                    {
                        "description": "Name of requested Configuration.",
                        "in": "path",
                        "name": "Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Context of requested configuration.",
                        "in": "path",
                        "name": "Context",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Gets the Configuration values.",
                "tags": [
                    "Configs"
                ]
            }
        },
        "/odata/Faces": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Faces_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Face]]"
                        }
                    }
                },
                "summary": "Gets list of all Faces present on the server.",
                "tags": [
                    "Faces"
                ]
            }
        },
        "/odata/Faces({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Faces_DeleteById",
                "parameters": [
                    {
                        "description": "Id of face to be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Face does not exist."
                    }
                },
                "summary": "Deletes the specified face.",
                "tags": [
                    "Faces"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Faces_GetById",
                "parameters": [
                    {
                        "description": "Id of Face which is requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Face"
                        }
                    }
                },
                "summary": "Gets the specified Face.",
                "tags": [
                    "Faces"
                ]
            }
        },
        "/odata/Groupings": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Groupings_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Grouping]]"
                        }
                    }
                },
                "summary": "Gets list of all Groupings present on the server.",
                "tags": [
                    "Groupings"
                ]
            }
        },
        "/odata/Groupings(Id={id})/Identities": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Groupings_GetIdentitiesById",
                "parameters": [
                    {
                        "description": "Id of Grouping.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Identity]]"
                        }
                    }
                },
                "summary": "Gets list of all Identities which belong to specified Grouping.",
                "tags": [
                    "Groupings"
                ]
            }
        },
        "/odata/Groupings({Id})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Groupings_GetById",
                "parameters": [
                    {
                        "description": "Id of Grouping which is requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Grouping"
                        }
                    }
                },
                "summary": "Gets the specified Grouping.",
                "tags": [
                    "Groupings"
                ]
            }
        },
        "/odata/Identities": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Identities_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Identity]]"
                        }
                    }
                },
                "summary": "Gets list of all Identities present on the server.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities(Id={id})/Faces": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Identities_GetFacesById",
                "parameters": [
                    {
                        "description": "Id of Identity.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Face]]"
                        }
                    }
                },
                "summary": "Gets the faces that belong to Identity with Id.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities(Id={id})/Photos": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Identities_GetPhotosById",
                "parameters": [
                    {
                        "description": "Id of Identity.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Photo]]"
                        }
                    }
                },
                "summary": "Gets the Photos that belong to specified Identity.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Identities_DeleteById",
                "parameters": [
                    {
                        "description": "Id of identity to be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Identity does not exist."
                    }
                },
                "summary": "Deletes the specified identity.",
                "tags": [
                    "Identities"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Identities_GetById",
                "parameters": [
                    {
                        "description": "Id of Identity which is requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Identity"
                        }
                    }
                },
                "summary": "Gets the specified Identity.",
                "tags": [
                    "Identities"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Currently only allows to update Hidden property.",
                "operationId": "Identities_PatchById",
                "parameters": [
                    {
                        "description": "Id of Identity that will be updated.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The entity to patch",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Identity"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Updates the specified Identity.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities/Action.Merge": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Merge provided Identities into single Identity. Id of first Identity Id will be used as merged Identity Id.",
                "operationId": "Identities_Merge",
                "parameters": [
                    {
                        "description": "JSON with list of Identity Ids that will be merged.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Ids": {
                                    "items": {
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "Ids"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Merges the specified Identities.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities/Action.Search": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "deprecated": false,
                "description": "Search will be performed on all Identities in specified Grouping or Scope, using all of their Faces. Uploaded photo should contain only one face.",
                "operationId": "Identities_Search",
                "parameters": [
                    {
                        "description": "Id of Grouping where search should be performed.",
                        "in": "formData",
                        "name": "GroupingId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Id of Scope where search should be performed.",
                        "in": "formData",
                        "name": "ScopeId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Binary face photo to upload.",
                        "in": "formData",
                        "name": "Data",
                        "required": true,
                        "type": "file"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Identity]]"
                        }
                    }
                },
                "summary": "Searches Identities by specified photo.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/Identities/Action.Split": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Splits requested Persons from provided Identity into new Identity. Newly created Identity Id will be returned in response.",
                "operationId": "Identities_Split",
                "parameters": [
                    {
                        "description": "JSON with list of Person Ids that will be split to new Identity and Id of Identity that will be splitted.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "IdentityId": {
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "PersonIds": {
                                    "items": {
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "IdentityId",
                                "PersonIds"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Splits the specified parameters.",
                "tags": [
                    "Identities"
                ]
            }
        },
        "/odata/InputFiles": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "InputFiles_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[InputFile]]"
                        }
                    }
                },
                "summary": "Gets list of all InputFiles present on the server.",
                "tags": [
                    "InputFiles"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "InputFiles_Post",
                "parameters": [
                    {
                        "description": "JSON with already existing ScopeId where output from newly created InputFile will be stored.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StreamSourceData"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "InputFile created",
                        "schema": {
                            "$ref": "#/definitions/InputFile"
                        }
                    }
                },
                "summary": "Creates a new InputFile.",
                "tags": [
                    "InputFiles"
                ]
            }
        },
        "/odata/InputFiles({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "InputFiles_DeleteById",
                "parameters": [
                    {
                        "description": "Id of InputFile that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the InputFile.",
                "tags": [
                    "InputFiles"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "InputFiles_GetById",
                "parameters": [
                    {
                        "description": "Id of InputFile which is requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InputFile"
                        }
                    }
                },
                "summary": "Gets the specified InputFile.",
                "tags": [
                    "InputFiles"
                ]
            }
        },
        "/odata/Logs/Action.SetLogLevel": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Allows to dynamically change log level for specified C# class (with assembly) in specified process. However, this setting will only last until process is restarted.",
                "operationId": "Logs_SetLogLevel",
                "parameters": [
                    {
                        "description": "JSON with ServiceName, FullyQualifiedName and Level of Log that will be set.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "FullyQualifiedName": {
                                    "type": "string"
                                },
                                "Level": {
                                    "type": "string"
                                },
                                "ServiceName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ServiceName",
                                "FullyQualifiedName",
                                "Level"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "summary": "Sets the log level.",
                "tags": [
                    "Logs"
                ]
            }
        },
        "/odata/Persons": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Persons_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Person]]"
                        }
                    }
                },
                "summary": "Gets list of all persons on the server.",
                "tags": [
                    "Persons"
                ]
            }
        },
        "/odata/Persons({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Persons_DeleteById",
                "parameters": [
                    {
                        "description": "Id of person to be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Person does not exist."
                    }
                },
                "summary": "Deletes the specified person.",
                "tags": [
                    "Persons"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Persons_GetById",
                "parameters": [
                    {
                        "description": "Id of requested Person.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                },
                "summary": "Gets the specified Person.",
                "tags": [
                    "Persons"
                ]
            }
        },
        "/odata/Photos": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Photos_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Photo]]"
                        }
                    }
                },
                "summary": "Gets list of all Photos present on the server.",
                "tags": [
                    "Photos"
                ]
            },
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "deprecated": false,
                "operationId": "Photos_Post",
                "parameters": [
                    {
                        "description": "Binary photo to upload",
                        "in": "formData",
                        "name": "Data",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "description": "Id of Scope where the Photo will be stored",
                        "in": "formData",
                        "name": "ScopeId",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Photo"
                        }
                    }
                },
                "summary": "Upload a Photo.",
                "tags": [
                    "Photos"
                ]
            }
        },
        "/odata/Photos(Id={id})/Faces": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Photos_GetFacesById",
                "parameters": [
                    {
                        "description": "Id of Photo",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Face]]"
                        }
                    }
                },
                "summary": "Gets Faces that belong to specified Photo.",
                "tags": [
                    "Photos"
                ]
            }
        },
        "/odata/Photos(Id={id})/Identities": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Photos_GetIdentitiesById",
                "parameters": [
                    {
                        "description": "Id of Photo",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Identity]]"
                        }
                    }
                },
                "summary": "Gets Identities that belong to specified Photo.",
                "tags": [
                    "Photos"
                ]
            }
        },
        "/odata/Photos({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Photos_DeleteById",
                "parameters": [
                    {
                        "description": "Id of Photo that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified Photo.",
                "tags": [
                    "Photos"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Photos_GetById",
                "parameters": [
                    {
                        "description": "Id of Photo that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Photo"
                        }
                    }
                },
                "summary": "Gets the specified Photo by Id.",
                "tags": [
                    "Photos"
                ]
            }
        },
        "/odata/Photos/Action.Delete": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Allows to delete multiple Photos in single call. This will start iterative deletion of Photos from input array. Response will contain array of Photo Ids that could not be deleted with appropriate reason.",
                "operationId": "Photos_Delete",
                "parameters": [
                    {
                        "description": "JSON with array of Photo Ids that will be deleted.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Ids": {
                                    "items": {
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "Ids"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Delete multiple Photos by their Ids.",
                "tags": [
                    "Photos"
                ]
            }
        },
        "/odata/Ping": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Ping_Get",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Ping"
                        }
                    }
                },
                "summary": "Gets the information about SmartFace database and assembly.",
                "tags": [
                    "Ping"
                ]
            }
        },
        "/odata/Scopes": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Scopes_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Scope]]"
                        }
                    }
                },
                "summary": "Gets list of all Scopes present on the server.",
                "tags": [
                    "Scopes"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Creates a new Scope of requested Type with custom description. Only possible Type values are 'Event' or 'Location'.",
                "operationId": "Scopes_Post",
                "parameters": [
                    {
                        "description": "JSON with Type and Description for new Scope.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeData"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }
                    }
                },
                "summary": "Creates Scope with default Grouping.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Scopes(Id={id})/Groupings": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Scopes_GetGroupingsById",
                "parameters": [
                    {
                        "description": "Id of Scope",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Grouping]]"
                        }
                    }
                },
                "summary": "Gets Groupings that belong to specified scope.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Scopes(Id={id})/Identities": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Scopes_GetIdentitiesById",
                "parameters": [
                    {
                        "description": "Id of Scope",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Identity]]"
                        }
                    }
                },
                "summary": "Gets Identities that belong to specified scope.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Scopes(Id={id})/Photos": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Scopes_GetPhotosById",
                "parameters": [
                    {
                        "description": "Id of Scope",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Photo]]"
                        }
                    }
                },
                "summary": "Gets Photos that belong to specified Scope.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Scopes({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "description": "This will trigger cascade deletion of Scope. This means that all Streams, Groupings, Identities, Persons and Faces under requested Scope Id will be also deleted.",
                "operationId": "Scopes_DeleteById",
                "parameters": [
                    {
                        "description": "Id of Scope that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified Scope by Id.",
                "tags": [
                    "Scopes"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Scopes_GetById",
                "parameters": [
                    {
                        "description": "Id of Scope that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }
                    }
                },
                "summary": "Gets the specified Scope.",
                "tags": [
                    "Scopes"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Currently only allows to update Description.",
                "operationId": "Scopes_PatchById",
                "parameters": [
                    {
                        "description": "Id of Scope that will be updated.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The entity to patch",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Scope"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Updates specified Scope.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Scopes/Function.GetStatus(key={key})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "description": "Returns progress info message for given scope.",
                "operationId": "Scopes_GetStatusByKey",
                "parameters": [
                    {
                        "description": "Id of scope.",
                        "format": "int64",
                        "in": "path",
                        "name": "Key",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Gets progress status of scope.",
                "tags": [
                    "Scopes"
                ]
            }
        },
        "/odata/Services": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Services_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Service]]"
                        }
                    }
                },
                "summary": "Gets list of all Services present on the server.",
                "tags": [
                    "Services"
                ]
            }
        },
        "/odata/Services({Id})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Services_GetById",
                "parameters": [
                    {
                        "description": "Id of Service that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }
                },
                "summary": "Gets the specified Service by Id.",
                "tags": [
                    "Services"
                ]
            }
        },
        "/odata/Services/Action.SoftRestart": {
            "post": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Services_SoftRestart",
                "parameters": [
                    {
                        "description": "SoftRestart action parameters",
                        "in": "body",
                        "name": "SoftRestartActionParameters",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Soft reset command to services send successfully."
                    }
                },
                "summary": "Handle soft restart of SmartFace services.",
                "tags": [
                    "Services"
                ]
            }
        },
        "/odata/Streams": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Streams_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Stream]]"
                        }
                    }
                },
                "summary": "Gets list of all streams on the server.",
                "tags": [
                    "Streams"
                ]
            }
        },
        "/odata/Streams({Id})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Streams_GetById",
                "parameters": [
                    {
                        "description": "Id of requested Stream.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Stream"
                        }
                    }
                },
                "summary": "Gets the specified Stream.",
                "tags": [
                    "Streams"
                ]
            }
        },
        "/odata/WatchlistItems": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "WatchlistItems_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[WlItem]]"
                        }
                    }
                },
                "summary": "Gets list of all WatchlistItems present on the server.",
                "tags": [
                    "WatchlistItems"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "WatchlistItems_Post",
                "parameters": [
                    {
                        "description": "The entity to post",
                        "in": "body",
                        "name": "WlItem",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WatchlistItemCreateData"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/WlItem"
                        }
                    }
                },
                "summary": "Creates new WatchlistItem entity with provided data.",
                "tags": [
                    "WatchlistItems"
                ]
            }
        },
        "/odata/WatchlistItems({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "WatchlistItems_DeleteById",
                "parameters": [
                    {
                        "description": "Id of WatchlistItem that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified WatchlistItem.",
                "tags": [
                    "WatchlistItems"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "WatchlistItems_GetById",
                "parameters": [
                    {
                        "description": "Id of WatchlistItem that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WlItem"
                        }
                    }
                },
                "summary": "Gets the specified WatchlistItem by Id.",
                "tags": [
                    "WatchlistItems"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "WatchlistItems_PatchById",
                "parameters": [
                    {
                        "description": "key: Id",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The entity to patch",
                        "in": "body",
                        "name": "WlItem",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WlItem"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Updates specified WatchlistItem.",
                "tags": [
                    "WatchlistItems"
                ]
            }
        },
        "/odata/WatchlistItems/Action.LinkToWatchlist": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "WatchlistItems_LinkToWatchlist",
                "parameters": [
                    {
                        "description": "JSON with WatchlistItem Ids and Watchlist Id that this WatchlistItems will be linked to.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "WatchlistId": {
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "WlItemIds": {
                                    "items": {
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "WlItemIds",
                                "WatchlistId"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Link WatchlistItem to Watchlists."
                    }
                },
                "summary": "Links to watchlist.",
                "tags": [
                    "WatchlistItems"
                ]
            }
        },
        "/odata/WatchlistItems/Action.UnlinkFromWatchlist": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "WatchlistItems_UnlinkFromWatchlist",
                "parameters": [
                    {
                        "description": "JSON with WatchlistItem Ids and Watchlist Id from which WatchlistItems will be unlinked.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "WatchlistId": {
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "WlItemIds": {
                                    "items": {
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "WlItemIds",
                                "WatchlistId"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Unlink WatchlistItem from Watchlists."
                    }
                },
                "summary": "Unlinks from watchlist.",
                "tags": [
                    "WatchlistItems"
                ]
            }
        },
        "/odata/Watchlists": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Watchlists_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Watchlist]]"
                        }
                    }
                },
                "summary": "Gets list of all Watchlists present on the server.",
                "tags": [
                    "Watchlists"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "Watchlists_Post",
                "parameters": [
                    {
                        "description": "The entity to post",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WatchlistData"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Watchlist"
                        }
                    }
                },
                "summary": "Creates new Watchlist entity with provided data.",
                "tags": [
                    "Watchlists"
                ]
            }
        },
        "/odata/Watchlists({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Watchlists_DeleteById",
                "parameters": [
                    {
                        "description": "Id of Watchlist that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified Watchlist.",
                "tags": [
                    "Watchlists"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Watchlists_GetById",
                "parameters": [
                    {
                        "description": "Id of Watchlist that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Watchlist"
                        }
                    }
                },
                "summary": "Gets the specified Watchlist by Id.",
                "tags": [
                    "Watchlists"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "operationId": "Watchlists_PatchById",
                "parameters": [
                    {
                        "description": "Id of Watchlist that will be updated.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "The entity to patch",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Watchlist"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "summary": "Updates specified Watchlist.",
                "tags": [
                    "Watchlists"
                ]
            }
        },
        "/odata/WlHits": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "WlHits_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[WlHit]]"
                        }
                    }
                },
                "summary": "Gets list of all WlHits present on the server.",
                "tags": [
                    "WlHits"
                ]
            }
        },
        "/odata/WlHits({Id})": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "WlHits_GetById",
                "parameters": [
                    {
                        "description": "Id of WlHit that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WlHit"
                        }
                    }
                },
                "summary": "Gets the specified WlHit.",
                "tags": [
                    "WlHits"
                ]
            }
        },
        "/odata/Workers": {
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Workers_Get",
                "parameters": [
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters the results, based on a Boolean condition.",
                        "in": "query",
                        "name": "$filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Aggregates the results according to one or more transformations.",
                        "in": "query",
                        "name": "$apply",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Sorts the results.",
                        "in": "query",
                        "name": "$orderby",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Returns only the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$top",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Skips the first n results.",
                        "format": "int32",
                        "in": "query",
                        "name": "$skip",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Includes a count of the matching results in the response.",
                        "in": "query",
                        "name": "$count",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ODataResponse[List[Worker]]"
                        }
                    }
                },
                "summary": "Gets list of all Workers present on the server.",
                "tags": [
                    "Workers"
                ]
            }
        },
        "/odata/Workers({Id})": {
            "delete": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Workers_DeleteById",
                "parameters": [
                    {
                        "description": "Id of Worker that will be deleted.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Deletes the specified Worker.",
                "tags": [
                    "Workers"
                ]
            },
            "get": {
                "consumes": [],
                "deprecated": false,
                "operationId": "Workers_GetById",
                "parameters": [
                    {
                        "description": "Id of Worker that was requested.",
                        "format": "int64",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Expands related entities inline.",
                        "in": "query",
                        "name": "$expand",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Selects which properties to include in the response.",
                        "in": "query",
                        "name": "$select",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                },
                "summary": "Gets the specified Worker.",
                "tags": [
                    "Workers"
                ]
            }
        },
        "/odata/Workers/Action.CreateWorker": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "Creates new Worker of requested Type with default Configuration. Note that created Worker is not enabled after this call. You can modify its Configuration and then enable it by calling Action.EnableWorker.",
                "operationId": "Workers_CreateWorker",
                "parameters": [
                    {
                        "description": "JSON with WorkerType of a newly created Worker.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "WorkerType": {
                                    "enum": [
                                        "ContinuousGroupingWorker",
                                        "GroupingWorker",
                                        "DataDistributionWorker",
                                        "ProgressInfoWorker",
                                        "DetectFaceWorker",
                                        "ExtractFaceWorker",
                                        "StreamWorker",
                                        "VideoPublishWorker",
                                        "DbCleanupWorker",
                                        "StillPictureDatabaseWorker",
                                        "StreamDataDbWorker"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "WorkerType"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    },
                    "400": {
                        "description": "If worker is not creatable or WorkerType is invalid."
                    }
                },
                "summary": "Creates a new Worker.",
                "tags": [
                    "Workers"
                ]
            }
        },
        "/odata/Workers/Action.DisableWorker": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "This will disable the specified Worker. That means that Worker thread will be stopped and deleted in appropriate Service.",
                "operationId": "Workers_DisableWorker",
                "parameters": [
                    {
                        "description": "JSON with Id of a Worker that will be disabled.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Id": {
                                    "format": "int64",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "Id"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Disables the Worker.",
                "tags": [
                    "Workers"
                ]
            }
        },
        "/odata/Workers/Action.EnableWorker": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": false,
                "description": "This will enable the specified Worker. That means that new Worker thread will be created and started in appropriate Service.",
                "operationId": "Workers_EnableWorker",
                "parameters": [
                    {
                        "description": "JSON with Id of a Worker that will be enabled.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "properties": {
                                "Id": {
                                    "format": "int64",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "Id"
                            ],
                            "type": "object"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "summary": "Enables the specified Worker.",
                "tags": [
                    "Workers"
                ]
            }
        },
        "/rpc/WatchlistItems/AddExistingFace": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "WatchlistItemsRpc_AddExistingFace",
                "parameters": [
                    {
                        "description": "JSON with FaceId and WatchlistItemId.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddExistingFaceToWlItemData"
                        }
                    }
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/octet-stream"
                ],
                "responses": {
                    "204": {
                        "description": "Creates copy of Face entity by FaceId and this Face will be linked to WatchlistItem by WatchlistItemId."
                    },
                    "400": {
                        "description": "FaceId is already linked to WlItem."
                    },
                    "404": {
                        "description": "FaceId or WatchlistItemId does not exists."
                    },
                    "409": {
                        "description": "Face is not extracted yet or some blob data is missing."
                    }
                },
                "summary": "Creates copy of Face entity by FaceId and this Face will be linked to WatchlistItem by WatchlistItemId.",
                "tags": [
                    "Rpc/WatchlistItems"
                ]
            }
        },
        "/rpc/WatchlistItems/Register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "WatchlistItemsRpc_Register",
                "parameters": [
                    {
                        "description": "JSON with WatchlistItem ExternalId (if item does not exist then it will be created), </br>\nImageData with base64 encoded images of single face with MIME type, <br>\nWatchlist ExternalIds which will be linked to WatchlistItem (if watchlists do not exists then they will be created with default threshold).",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegisterWlItemData"
                        }
                    }
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/octet-stream"
                ],
                "responses": {
                    "204": {
                        "description": "WlItem successfully registered."
                    },
                    "400": {
                        "description": "Exactly one face expected on single photo"
                    }
                },
                "summary": "Create or replace WlItem with provided data in payload.",
                "tags": [
                    "Rpc/WatchlistItems"
                ]
            }
        },
        "/rpc/WatchlistItems/RemoveFace": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "WatchlistItemsRpc_RemoveFace",
                "parameters": [
                    {
                        "description": "JSON with FaceId and WatchlistItemId.",
                        "in": "body",
                        "name": "Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RemoveExistingFaceFromWlItemData"
                        }
                    }
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/octet-stream"
                ],
                "responses": {
                    "204": {
                        "description": "Remove Face from WatchlistItem specified by FaceId and WatchlistItemId."
                    },
                    "400": {
                        "description": "Face with is not linked to WlItem."
                    },
                    "404": {
                        "description": "FaceId or WatchlistItemId does not exists."
                    }
                },
                "summary": "Remove Face from WatchlistItem specified by FaceId and WatchlistItemId.",
                "tags": [
                    "Rpc/WatchlistItems"
                ]
            }
        }
    },
    "produces": [],
    "responses": {},
    "schemes": [
        "http",
        "https"
    ],
    "security": [],
    "securityDefinitions": {},
    "swagger": "2.0",
    "tags": []
}
