{
  "openapi": "3.0.1",
  "info": {
    "title": "SmartFace REST API",
    "version": "4.7.0.0"
  },
  "paths": {
    "/api/v1/Cameras/{id}": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves the camera by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the camera.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frame.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "404": {
            "description": "The frame with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Camera"
        ],
        "summary": "Deletes a camera by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the camera.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The camera with given id was deleted successfully."
          },
          "404": {
            "description": "The individual with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves all cameras.",
        "responses": {
          "200": {
            "description": "Returns the found cameras.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Camera"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Camera"
        ],
        "summary": "Updates the specified camera.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> are <code>cpu</code> and <code>gpu</code>,\r\nfor remote detection <code>cpu_remote</code> and <code>gpu_remote</code>\r\nand <code>none</code> when face detection should be disabled and only object detection should work.\r\nDefault is <code>cpu</code>.\r\nSupported values for <code>TemplateGeneratorResourceId</code> are <code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.\r\nSupported values for <code>PedestrianDetectorResourceId</code> are <code>none</code>, <code>cpu_remote</code>, <code>gpu_remote</code> and <code>body_parts_cpu_remote</code>. Default is <code>none</code>.",
        "requestBody": {
          "description": "New camera configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "404": {
            "description": "The camera was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Camera"
        ],
        "summary": "Creates a new camera.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> are <code>cpu</code> and <code>gpu</code>,\r\nfor remote detection <code>cpu_remote</code> and <code>gpu_remote</code>\r\nand <code>none</code> when face detection should be disabled and only object detection should work.\r\nDefault is <code>cpu</code>.\r\nSupported values for <code>TemplateGeneratorResourceId</code> are <code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.\r\nSupported values for <code>PedestrianDetectorResourceId</code> are <code>none</code>, <code>cpu_remote</code>, <code>gpu_remote</code> and <code>body_parts_cpu_remote</code>. Default is <code>none</code>.\r\nSupported values for <code>SpoofDetectorResourceIds</code> are <code>none</code> and <code>body_parts_cpu_remote</code>. Default is <code>none</code>.",
        "requestBody": {
          "description": "New camera configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new camera was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras/{id}/Tracklets": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves tracklets with faces as a paged collection by their camera Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the camera.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The camera with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras/{id}/Frames": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves frames as a paged collection by their camera Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the camera.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The camera with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces/{id}": {
      "get": {
        "tags": [
          "Face"
        ],
        "summary": "Retrieves the face by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the face.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the face.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found face.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Face"
                }
              }
            }
          },
          "404": {
            "description": "The face with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Face"
        ],
        "summary": "Deletes the face by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the face to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the face to delete.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The face with given Id was deleted successfully."
          },
          "404": {
            "description": "The face with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces": {
      "get": {
        "tags": [
          "Face"
        ],
        "summary": "Retrieves faces as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Frames/{id}": {
      "get": {
        "tags": [
          "Frame"
        ],
        "summary": "Retrieves the frame by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the frame.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the frame.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frame.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Frame"
                }
              }
            }
          },
          "404": {
            "description": "The frame with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Frame"
        ],
        "summary": "Deletes the frame by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the frame to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the frame to delete.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The frame with given Id was deleted successfully."
          },
          "404": {
            "description": "The frame with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Frames": {
      "get": {
        "tags": [
          "Frame"
        ],
        "summary": "Retrieves frames as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Images/{id}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Retrieves the image by its Id.",
        "description": "Two optional parameters can be specified that allow the image to be resize to given values.\r\nMore specifically, minSize will resize the smaller edge to minSize, maxSize will resize the larger edge to maxSize.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the image.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the image.",
              "format": "uuid"
            }
          },
          {
            "name": "minSize",
            "in": "query",
            "description": "Minimum size of the smaller edge.",
            "schema": {
              "type": "integer",
              "description": "Minimum size of the smaller edge.",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "maxSize",
            "in": "query",
            "description": "Maximum size of the larger edge.",
            "schema": {
              "type": "integer",
              "description": "Maximum size of the larger edge.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The image with given Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/{id}": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves the individual by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the individual.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Individual"
                }
              }
            }
          },
          "404": {
            "description": "The individual with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Individual"
        ],
        "summary": "Deletes the individual by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the individual to delete.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The individual with given Id was deleted successfully."
          },
          "404": {
            "description": "The individual with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves individuals as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/{id}/Tracklets": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves the tracklets with faces by their individual Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the individual.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The individual with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Search": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Searches for individuals by image in the specified grouping.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> and <code>TemplateGeneratorResourceId</code> are\r\n<code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.",
        "requestBody": {
          "description": "Request containing image, grouping id and resources.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The corresponding individuals were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Split": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Splits specified individual, assigns specified tracklets to the newly created individual.",
        "description": "Specified tracklets must be part of the previous individual.",
        "requestBody": {
          "description": "Request containing tracklets and previous individual id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created individual was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Merge": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Merges multiple individuals into one individual.",
        "description": "Individuals are merged into a individual, whose id is the first id in the request array of individuals.",
        "requestBody": {
          "description": "Request containing array of individuals to be merged.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merged individual was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the live grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Deletes a live grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The live grouping was deleted successfully."
          },
          "404": {
            "description": "The live grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while deleting live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves all live groupings.",
        "responses": {
          "200": {
            "description": "Returns the found live groupings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LiveGrouping"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Creates a new live grouping.",
        "requestBody": {
          "description": "Request containing live grouping properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Live grouping was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Updates the specified live grouping.",
        "requestBody": {
          "description": "New live grouping configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGrouping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGrouping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGrouping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGrouping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned the newly updated live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Cameras": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves cameras belonging to a live grouping with given id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found cameras.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Camera"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Individuals": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the individuals belonging to a live grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Frames": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the frames belonging to a live grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/LinkCameras": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Links specified cameras to a given live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The cameras were successfully linked to the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/UnlinkCameras": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Unlinks specified cameras from a live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the live grouping",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The camera(s) were successfully unlinked from the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Pedestrians/{id}": {
      "get": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Retrieves the pedestrian by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the pedestrian.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the pedestrian.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found pedestrian.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pedestrian"
                }
              }
            }
          },
          "404": {
            "description": "The pedestrian with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Deletes the pedestrian by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the pedestrian to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the pedestrian to delete.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pedestrian with given Id was deleted successfully."
          },
          "404": {
            "description": "The pedestrian with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Pedestrians": {
      "get": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Retrieves pedestrians as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found pedestrians.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PedestrianPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves a record grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Deletes a record grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record grouping was deleted successfully."
          },
          "404": {
            "description": "The record grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while deleting record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves all record groupings.",
        "responses": {
          "200": {
            "description": "Returns the found record groupings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordGrouping"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Creates a new record grouping.",
        "requestBody": {
          "description": "Request containing new record grouping configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new record grouping was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Updates a specified record grouping.",
        "requestBody": {
          "description": "New record grouping configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/VideoRecords": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves video records belonging to record grouping with given id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found video records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoRecord"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The video records or record grouping were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Individuals": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves individuals belonging to a record grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Frames": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves frames belonging to a record grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Image": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Uploads the image to a specified record grouping.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> are <code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing image data.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new image was uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while uploading the image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/State": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves the state of the record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupingState"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Trigger": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Triggers a start of the record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record grouping started successfully."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/LinkVideoRecords": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Links specified video records to a given record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing video record ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The video record(s) were successfully linked to the record grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping or video records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/UnlinkVideoRecords": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Unlinks specified video records from a record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the record grouping",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing video records ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The video record(s) were successfully unlinked from the record grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping or video records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/DataStorage/Video": {
      "get": {
        "tags": [
          "SetupDataStorage"
        ],
        "summary": "Retrieves the current video data storage config.",
        "responses": {
          "200": {
            "description": "Video data storage config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video data storage config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupDataStorage"
        ],
        "summary": "Updates the video data storage config with specified values.",
        "requestBody": {
          "description": "The new video data storage configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video data storage config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video data storage config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/DbCleanup": {
      "get": {
        "tags": [
          "SetupDbCleanup"
        ],
        "summary": "Retrieves current database cleanup config.",
        "responses": {
          "200": {
            "description": "Database cleanup config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Database cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupDbCleanup"
        ],
        "summary": "Updates the database cleanup config with specified values.",
        "requestBody": {
          "description": "The new database cleanup configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Database cleanup config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Database cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/Watchlists/AutoLearn": {
      "get": {
        "tags": [
          "SetupWatchlistAutoLearn"
        ],
        "summary": "Retrieves the current watchlist autolearn config.",
        "responses": {
          "200": {
            "description": "Watchlist autolearn config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlist autolearn config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupWatchlistAutoLearn"
        ],
        "summary": "Updates the watchlist autolearn config with specified values.",
        "requestBody": {
          "description": "The new watchlist autolearn configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist autolearn config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlist autolearn config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet/{id}": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves the tracklet by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the tracklet.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tracklet was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tracklet"
                }
              }
            }
          },
          "404": {
            "description": "The tracklet with specified id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Deletes the tracklets by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the tracklet to delete.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tracklet with given Id was deleted successfully."
          },
          "404": {
            "description": "The tracklet with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves tracklets as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet/{id}/Faces": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves faces for given tracklet id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the tracklet.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Retrieves the version information.",
        "responses": {
          "200": {
            "description": "Version information was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieve a video record by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the video record.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found video record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "404": {
            "description": "Video record with specified id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Deletes a video record by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the video record.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Video record was deleted successfully."
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves all video records.",
        "responses": {
          "200": {
            "description": "Returned the found video records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoRecord"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Updates the specified video record with given values.",
        "requestBody": {
          "description": "New video record values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video record was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Creates a video record.",
        "requestBody": {
          "description": "Request specifying video record properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Video record was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "409": {
            "description": "The was a conflict while creating the video record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Tracklets": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves tracklets belonging to a video record with the given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the video record.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video record with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Frames": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves the frames belonging to video record with the given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the video record.",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video record with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlists as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Creates a new watchlist.",
        "requestBody": {
          "description": "Request containing watchlist name and threshold.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new watchlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Upserts the watchlist.",
        "description": "If the watchlist with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist with specified Id exists, it updates it.",
        "requestBody": {
          "description": "Request containing watchlist properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/{id}": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlist by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Deletes a watchlist by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The watchlist with given id was deleted successfully."
          },
          "404": {
            "description": "The watchlist with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/{id}/WatchlistMembers": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlist members belonging to a watchlist with specified watchlist id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist.",
              "nullable": true
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/Search": {
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Searches the specified watchlists for matches with the given image.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> and <code>TemplateGeneratorResourceId</code> are\r\n<code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.",
        "requestBody": {
          "description": "Request containing searching image and ids of watchlists to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the match results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchInWatchlistResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlists with specified ids were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves the watchlist members as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Creates a new watchlist member.",
        "requestBody": {
          "description": "Request specifying watchlist member properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist member was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Upserts the watchlist member.",
        "description": "If the watchlist member with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist member with specified Id exists, it updates it.",
        "requestBody": {
          "description": "Request specifying which watchlist member should be updated and how to update it.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist member was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves the watchlist member by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist member.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Deletes a watchlist member by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist member.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The watchlist member with given id was deleted successfully."
          },
          "404": {
            "description": "The watchlist member with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/Faces": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves faces for given watchlist member id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the watchlist member.",
              "nullable": true
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/LinkToWatchlist": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Links specified watchlist members to a given watchlist.",
        "requestBody": {
          "description": "Request specifying watchlist member ids and watchlist id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Watchlist members were successfully linked to the watchlist."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist or watchlist members were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/UnlinkFromWatchlist": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Unlinks specified watchlist members for a given watchlist.",
        "requestBody": {
          "description": "Request specifying watchlist member ids and watchlist id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Watchlist members were successfully unlinked from the watchlist."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist or watchlist members were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/Register": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Registers a watchlist member.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> and <code>TemplateGeneratorResourceId</code> are\r\n<code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.",
        "requestBody": {
          "description": "Request specifying watchlist member register details.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist members was registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberWithRelatedData"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict during the registration of the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddFaceFromSystem": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified face to a given watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The watchlist member id.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying face id to add.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The face was successfully added to the watchlist member."
          },
          "404": {
            "description": "The face or watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict adding the specified face to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddNewFace": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified face to a given watchlist member.",
        "description": "Supported values for <code>FaceDetectorResourceId</code> and <code>TemplateGeneratorResourceId</code> are\r\n<code>cpu</code> and <code>gpu</code>. Default is <code>cpu</code>.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The watchlist member id.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The image with face to add with configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created face which was added to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Face"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict adding the new face to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/RemoveFace": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Removes a face from a watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The watchlist member id.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying face id to remove.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The face was successfully added to the watchlist member."
          },
          "404": {
            "description": "The face or watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "VideoFaceDetectorConfig": {
        "required": [
          "confidenceThreshold",
          "maxFaces",
          "maxFaceSize",
          "minFaceSize"
        ],
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoPedestrianDetectorConfig": {
        "required": [
          "confidenceThreshold",
          "maxPedestrians",
          "maxPedestrianSize",
          "minPedestrianSize"
        ],
        "type": "object",
        "properties": {
          "minPedestrianSize": {
            "type": "number",
            "format": "float"
          },
          "maxPedestrianSize": {
            "type": "number",
            "format": "float"
          },
          "maxPedestrians": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FaceSaveStrategy": {
        "enum": [
          "All",
          "FirstFace",
          "BestFace",
          "FirstFace, BestFace",
          "MatchedOnly"
        ],
        "type": "string"
      },
      "SpoofDetectorConfig": {
        "required": [
          "externalScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "externalScoreThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Camera": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "pedestrianDetectorConfig",
          "pedestrianDetectorResourceId",
          "previewMaxDimension",
          "redetectionTime",
          "saveFrameImageData",
          "serviceName",
          "source",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization"
        ],
        "type": "object",
        "properties": {
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/VideoPedestrianDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "pedestrianDetectorResourceId": {
            "type": "string"
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string"
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean"
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32"
          },
          "serviceName": {
            "type": "string"
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/SpoofDetectorConfig"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "CameraUpdateRequest": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "previewMaxDimension",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/VideoPedestrianDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "pedestrianDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string"
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean"
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/SpoofDetectorConfig"
          }
        },
        "additionalProperties": false
      },
      "FaceDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PedestrianDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minPedestrianSize": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "maxPedestrianSize": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "maxPedestrians": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpoofDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "externalScoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CameraCreateRequest": {
        "required": [
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfigCreateRequest"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/PedestrianDetectorConfigCreateRequest"
          },
          "pedestrianDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "nullable": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "trackMotionOptimization": {
            "type": "string",
            "nullable": true
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean",
            "nullable": true
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "serviceName": {
            "type": "string",
            "nullable": true
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/SpoofDetectorConfigCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "Tracklet": {
        "required": [
          "createdAt",
          "id",
          "timeAppeared",
          "timeAppearedRelativeMs",
          "timeDisappeared",
          "timeDisappearedRelativeMs",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "timeAppeared": {
            "type": "string",
            "format": "date-time"
          },
          "timeDisappeared": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timeAppearedRelativeMs": {
            "type": "integer",
            "format": "int64"
          },
          "timeDisappearedRelativeMs": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrackletPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tracklet"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FrameState": {
        "enum": [
          "New",
          "Processing",
          "Processed",
          "Error"
        ],
        "type": "string"
      },
      "Frame": {
        "required": [
          "createdAt",
          "id",
          "imageDataId",
          "positionInMs",
          "receivedAt",
          "state",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/FrameState"
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionInMs": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FramePagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Frame"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceState": {
        "enum": [
          "New",
          "Extracting",
          "Extracted",
          "Error"
        ],
        "type": "string"
      },
      "FaceType": {
        "enum": [
          "Regular",
          "AutoLearn"
        ],
        "type": "string"
      },
      "FaceMaskStatus": {
        "enum": [
          "Unknown",
          "Mask",
          "NoMask"
        ],
        "type": "string"
      },
      "Face": {
        "required": [
          "age",
          "autolearnClusterType",
          "createdAt",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "faceArea",
          "faceAreaChange",
          "faceMaskConfidence",
          "faceMaskStatus",
          "faceOrder",
          "facesOnFrameCount",
          "frameId",
          "gender",
          "id",
          "imageDataId",
          "leftEyeX",
          "leftEyeY",
          "noseTipConfidence",
          "pitchAngle",
          "processedAt",
          "quality",
          "rightEyeX",
          "rightEyeY",
          "rollAngle",
          "state",
          "templateQuality",
          "trackletId",
          "type",
          "updatedAt",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "trackletId": {
            "type": "string",
            "format": "uuid"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "templateQuality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/FaceState"
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "leftEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leftEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/FaceType"
          },
          "age": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gender": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseTipConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskStatus": {
            "$ref": "#/components/schemas/FaceMaskStatus"
          },
          "faceArea": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "facesOnFrameCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "faceAreaChange": {
            "type": "number",
            "format": "double"
          },
          "yawAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pitchAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rollAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "autolearnClusterType": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FacePagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Face"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Individual": {
        "required": [
          "bestFaceId",
          "createdAt",
          "entranceTime",
          "exitTime",
          "id",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "entranceTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bestFaceId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndividualPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Individual"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte"
          }
        },
        "additionalProperties": false
      },
      "FaceDetectorConfig": {
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SearchInIndividualsRequest": {
        "required": [
          "groupingId",
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "groupingId": {
            "type": "string",
            "format": "uuid"
          },
          "matchThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SearchInIndividualsResponse": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Individual"
            }
          }
        },
        "additionalProperties": false
      },
      "SplitIndividualsRequest": {
        "required": [
          "previousIndividualId",
          "trackletsIds"
        ],
        "type": "object",
        "properties": {
          "trackletsIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "previousIndividualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SplitIndividualsResponse": {
        "required": [
          "individualId"
        ],
        "type": "object",
        "properties": {
          "individualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "MergeIndividualsRequest": {
        "required": [
          "individualIds"
        ],
        "type": "object",
        "properties": {
          "individualIds": {
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "MergeIndividualsResponse": {
        "required": [
          "individualId"
        ],
        "type": "object",
        "properties": {
          "individualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingConfig": {
        "required": [
          "slidingWindow",
          "step",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "step": {
            "type": "integer",
            "format": "int32"
          },
          "slidingWindow": {
            "type": "integer",
            "format": "int32"
          },
          "threshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LiveGrouping": {
        "required": [
          "config",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LiveGroupingConfig"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingConfigCreateRequest": {
        "type": "object",
        "properties": {
          "step": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "slidingWindow": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingCreateRequest": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LiveGroupingConfigCreateRequest"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkInputRequest": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "Pedestrian": {
        "required": [
          "ankleLeftX",
          "ankleLeftY",
          "ankleRightX",
          "ankleRightY",
          "areaOnFrame",
          "createdAt",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "earLeftX",
          "earLeftY",
          "earRightX",
          "earRightY",
          "elbowLeftX",
          "elbowLeftY",
          "elbowRightX",
          "elbowRightY",
          "eyeLeftX",
          "eyeLeftY",
          "eyeRightX",
          "eyeRightY",
          "frameId",
          "hipLeftX",
          "hipLeftY",
          "hipRightX",
          "hipRightY",
          "id",
          "imageDataId",
          "kneeLeftX",
          "kneeLeftY",
          "kneeRightX",
          "kneeRightY",
          "neckX",
          "neckY",
          "noseX",
          "noseY",
          "objectOrderOnFrameForType",
          "objectsOnFrameCountForType",
          "pose",
          "processedAt",
          "quality",
          "shoulderLeftX",
          "shoulderLeftY",
          "shoulderRightX",
          "shoulderRightY",
          "streamId",
          "trackletId",
          "updatedAt",
          "wristLeftX",
          "wristLeftY",
          "wristRightX",
          "wristRightY"
        ],
        "type": "object",
        "properties": {
          "trackletId": {
            "type": "string",
            "format": "uuid"
          },
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "streamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "areaOnFrame": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "objectOrderOnFrameForType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "objectsOnFrameCountForType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pose": {
            "type": "string"
          },
          "earLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "neckX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "neckY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PedestrianPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pedestrian"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingConfig": {
        "required": [
          "threshold"
        ],
        "type": "object",
        "properties": {
          "threshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RecordGrouping": {
        "required": [
          "config",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/RecordGroupingConfig"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingConfigCreateRequest": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingCreateRequest": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/RecordGroupingConfigCreateRequest"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoState": {
        "enum": [
          "Ready",
          "Processing",
          "Processed",
          "Error"
        ],
        "type": "string"
      },
      "VideoRecord": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "previewMaxDimension",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "state",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/VideoState"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string",
            "deprecated": true
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "UploadedImageRequest": {
        "required": [
          "imageData"
        ],
        "type": "object",
        "properties": {
          "imageData": {
            "$ref": "#/components/schemas/ImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UploadedImageResponse": {
        "required": [
          "frameId",
          "frameImageDataId"
        ],
        "type": "object",
        "properties": {
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "frameImageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProgressStatus": {
        "enum": [
          "Processing",
          "Ready"
        ],
        "type": "string"
      },
      "GroupingState": {
        "required": [
          "id",
          "numNewFrames",
          "numUnprocFrames",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "numNewFrames": {
            "type": "integer",
            "format": "int32"
          },
          "numUnprocFrames": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ProgressStatus"
          }
        },
        "additionalProperties": false
      },
      "VideoDataStorageMode": {
        "enum": [
          "None",
          "All"
        ],
        "type": "string"
      },
      "VideoDataStorageConfig": {
        "required": [
          "storageMode"
        ],
        "type": "object",
        "properties": {
          "storageMode": {
            "$ref": "#/components/schemas/VideoDataStorageMode"
          }
        },
        "additionalProperties": false
      },
      "DbCleanupConfig": {
        "required": [
          "cleanupAmount",
          "cleanupStart",
          "deleteSql",
          "enabled",
          "maxFramesCount",
          "maxImageDataAge"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "maxFramesCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxImageDataAge": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cleanupStart": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "cleanupAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deleteSql": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistAutoLearnConfig": {
        "required": [
          "enabled",
          "executionStartTime",
          "maxAutoLearnFacesCount",
          "selectionThreshold"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "executionStartTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "maxAutoLearnFacesCount": {
            "type": "integer",
            "format": "int32"
          },
          "selectionThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "maskedSelectionThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "noFaceMaskConfidenceThreshold": {
            "type": "number",
            "format": "double"
          },
          "faceMaskConfidenceThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "VersionInfo": {
        "required": [
          "assemblyLastModifiedTime",
          "assemblyVersion",
          "databaseVersion",
          "databaseVersionCreationTime",
          "databaseVersionUpdatedTime"
        ],
        "type": "object",
        "properties": {
          "databaseVersion": {
            "type": "string"
          },
          "databaseVersionCreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "databaseVersionUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "assemblyVersion": {
            "type": "string"
          },
          "assemblyLastModifiedTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "VideoRecordUpdateRequest": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "id",
          "imageQuality",
          "maskImagePath",
          "name",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "templateGenerationTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "VideoRecordCreateRequest": {
        "required": [
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfigCreateRequest"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "trackMotionOptimization": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "faceSaveStrategy": {
            "$ref": "#/components/schemas/FaceSaveStrategy"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean",
            "nullable": true
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "Watchlist": {
        "required": [
          "createdAt",
          "displayName",
          "fullName",
          "id",
          "threshold",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "threshold": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Watchlist"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistCreateRequest": {
        "required": [
          "displayName",
          "fullName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "threshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WatchlistUpsertRequest": {
        "required": [
          "displayName",
          "fullName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "threshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WatchlistMember": {
        "required": [
          "createdAt",
          "displayName",
          "fullName",
          "id",
          "note",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WatchlistMember"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxResultCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GenderType": {
        "enum": [
          "Male",
          "Female"
        ],
        "type": "string"
      },
      "SearchByImageMatchResult": {
        "required": [
          "displayName",
          "fullName",
          "score",
          "watchlistDisplayName",
          "watchlistFullName",
          "watchlistId",
          "watchlistMemberId"
        ],
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "watchlistMemberId": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "watchlistDisplayName": {
            "type": "string"
          },
          "watchlistFullName": {
            "type": "string"
          },
          "watchlistId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistResponse": {
        "required": [
          "age",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "faceMaskConfidence",
          "faceMaskStatus",
          "gender",
          "leftEyeX",
          "leftEyeY",
          "matchResults",
          "noseTipConfidence",
          "quality",
          "rightEyeX",
          "rightEyeY"
        ],
        "type": "object",
        "properties": {
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "leftEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leftEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "age": {
            "type": "number",
            "format": "double"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderType"
          },
          "faceMaskConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseTipConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskStatus": {
            "$ref": "#/components/schemas/FaceMaskStatus"
          },
          "matchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchByImageMatchResult"
            }
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberCreateRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberUpsertRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMembersLinkRequest": {
        "required": [
          "watchlistId",
          "watchlistMembersIds"
        ],
        "type": "object",
        "properties": {
          "watchlistId": {
            "type": "string"
          },
          "watchlistMembersIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "RegistrationImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "data": {
            "type": "string",
            "format": "byte"
          }
        },
        "additionalProperties": false
      },
      "RegisterWatchlistMemberRequest": {
        "required": [
          "id",
          "images",
          "watchlistIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "images": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationImageData"
            }
          },
          "watchlistIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "keepAutoLearnPhotos": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberWithRelatedData": {
        "required": [
          "createdAt",
          "displayName",
          "faces",
          "fullName",
          "id",
          "note",
          "updatedAt",
          "watchlists"
        ],
        "type": "object",
        "properties": {
          "watchlists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Watchlist"
            }
          },
          "faces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Face"
            }
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceWatchlistMemberLinkingRequest": {
        "required": [
          "faceId"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AddNewFaceRequest": {
        "required": [
          "imageData"
        ],
        "type": "object",
        "properties": {
          "imageData": {
            "$ref": "#/components/schemas/RegistrationImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FaceWatchlistMemberRemoveRequest": {
        "required": [
          "faceId"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      }
    }
  }
}