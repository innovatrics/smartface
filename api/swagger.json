{
  "openapi": "3.0.1",
  "info": {
    "title": "SmartFace REST API",
    "version": "v5_4.33.0"
  },
  "paths": {
    "/api/v1/Cameras/{id}": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves the camera by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "404": {
            "description": "The camera with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Camera"
        ],
        "summary": "Deletes a camera by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The camera with given id was deleted successfully."
          },
          "404": {
            "description": "The camera with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves all cameras.",
        "responses": {
          "200": {
            "description": "Returns the found cameras.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Camera"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Camera"
        ],
        "summary": "Updates the specified camera.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n\r\n    none, cpu, gpu, accurate_cpu, accurate_gpu, cpu_remote, gpu_remote, any_remote, accurate_cpu_remote, accurate_gpu_remote, accurate_any_remote\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n\r\nSupported values for ```PedestrianDetectorResourceId``` are:\r\n\r\n    none, cpu_remote, gpu_remote, any_remote, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote\r\n \r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote\r\n            \r\nSupported values for ```PedestrianExtractorResourceId``` are:\r\n\r\n    cpu, gpu, any, none\r\n            \r\nSupported values for ```PalmDetectorResourceId``` are:\r\n\r\n    none, cpu\r\n\r\nSupported values for ```PalmTemplateGeneratorResourceId``` are:\r\n\r\n    cpu\r\n\r\nSupported values for ```ObjectDetectorResourceId``` are:\r\n\r\n    none, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote\r\n            \r\nSupported values for ```FaceSaveStrategy``` are:\r\n            \r\n    Balanced, None, All, MatchedOnly\r\n            \r\nSupported values for ```PedestrianSaveStrategy``` are:\r\n            \r\n    Balanced, None, All\r\n            \r\nSupported values for ```ObjectSaveStrategy``` are:\r\n            \r\n    Balanced, None, All, MatchedOnly",
        "requestBody": {
          "description": "New camera configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "404": {
            "description": "The camera was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Camera"
        ],
        "summary": "Creates a new camera.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n\r\n    none, cpu, gpu, accurate_cpu, accurate_gpu, cpu_remote, gpu_remote, any_remote, accurate_cpu_remote, accurate_gpu_remote, accurate_any_remote\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n\r\nSupported values for ```PedestrianDetectorResourceId``` are:\r\n\r\n    none, cpu_remote, gpu_remote, any_remote, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote\r\n\r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote\r\n            \r\nSupported values for ```PedestrianExtractorResourceId``` are:\r\n\r\n    cpu, gpu, any, none\r\n            \r\nSupported values for ```PalmDetectorResourceId``` are:\r\n\r\n    none, cpu\r\n\r\nSupported values for ```PalmTemplateGeneratorResourceId``` are:\r\n\r\n    cpu\r\n\r\nSupported values for ```ObjectDetectorResourceId``` are:\r\n\r\n    none, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote\r\n            \r\nSupported values for ```FaceSaveStrategy``` are:\r\n            \r\n    Balanced, None, All, MatchedOnly\r\n            \r\nSupported values for ```PedestrianSaveStrategy``` are:\r\n            \r\n    Balanced, None, All\r\n            \r\nSupported values for ```ObjectSaveStrategy``` are:\r\n            \r\n    Balanced, None, All, MatchedOnly",
        "requestBody": {
          "description": "New camera configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CameraCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new camera was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras/{id}/Tracklets": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves tracklets with faces as a paged collection by their camera Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The camera with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Cameras/{id}/Frames": {
      "get": {
        "tags": [
          "Camera"
        ],
        "summary": "Retrieves frames as a paged collection by their camera Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the camera.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The camera with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Detect": {
      "post": {
        "tags": [
          "Detection"
        ],
        "summary": "Detects pedestrians and objects on the image",
        "description": "Supported values for ```PedestrianDetectorResourceId``` are:\r\n\r\n    none, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote\r\n\r\nSupported values for ```ObjectDetectorResourceId``` are:\r\n\r\n    none, sfe_object_cpu_remote, sfe_object_gpu_remote, sfe_object_any_remote",
        "requestBody": {
          "description": "Detection Request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all detected pedestrians and objects on image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/EdgeStreams/{id}": {
      "get": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Retrieves the EdgeStream by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the EdgeStream.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found EdgeStream.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStream"
                }
              }
            }
          },
          "404": {
            "description": "The EdgeStream with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Deletes a EdgeStream by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the EdgeStream.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The EdgeStream with given id was deleted successfully."
          },
          "404": {
            "description": "The EdgeStream with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/EdgeStreams": {
      "get": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Retrieves all EdgeStreams.",
        "responses": {
          "200": {
            "description": "Returns the found EdgeStreams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EdgeStream"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Creates a new EdgeStream.",
        "description": "Supported values for ```FaceSaveStrategy``` are:\n\r\n\r\n    Balanced, All, MatchedOnly, None\r\n            \r\nSupported values for ```PedestrianSaveStrategy``` are:\r\n            \r\n    Balanced, None, All\r\n            \r\nSupported values for ```ObjectSaveStrategy``` are:\n\r\n\r\n    Balanced, All, MatchedOnly, None\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n\r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote",
        "requestBody": {
          "description": "New EdgeStream configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new EdgeStream was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStream"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the EdgeStream.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Updates the specified EdgeStream.",
        "description": "Supported values for ```FaceSaveStrategy``` are:\n\r\n\r\n    Balanced, All, MatchedOnly, None\r\n            \r\nSupported values for ```PedestrianSaveStrategy``` are:\r\n            \r\n    Balanced, None, All\r\n            \r\nSupported values for ```ObjectSaveStrategy``` are:\n\r\n\r\n    Balanced, All, MatchedOnly, None\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n\r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote",
        "requestBody": {
          "description": "New EdgeStream configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated EdgeStream.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStream"
                }
              }
            }
          },
          "404": {
            "description": "The EdgeStream was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/EdgeStreams/{id}/WatchlistSynchronization": {
      "put": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Sets the watchlist synchronization for the specified EdgeStream.",
        "description": "Supported values for ```watchlistSyncOption``` are: \n\r\n\r\n    None, All, Selected",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Settings for watchlist synchronization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronization"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "EdgeStream"
        ],
        "summary": "Retrieves watchlist synchronization settings for the specified EdgeStream.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronization"
                }
              }
            }
          },
          "404": {
            "description": "The EdgeStream with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces/{id}": {
      "get": {
        "tags": [
          "Face"
        ],
        "summary": "Retrieves the face by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the face.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found face.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Face"
                }
              }
            }
          },
          "404": {
            "description": "The face with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Face"
        ],
        "summary": "Deletes the face by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the face to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The face with given Id was deleted successfully."
          },
          "404": {
            "description": "The face with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces": {
      "get": {
        "tags": [
          "Face"
        ],
        "summary": "Retrieves faces as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces/Search": {
      "post": {
        "tags": [
          "Face"
        ],
        "summary": "Searches for similar stored faces based on the given image.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any",
        "requestBody": {
          "description": "Request containing reference image to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the face match results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInFacesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces/SpoofCheck": {
      "post": {
        "tags": [
          "Face"
        ],
        "summary": "Checks liveness of one face on the given image.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:\n\r\n            \r\n    liveness_distant_any_remote, liveness_distant_cpu_remote, liveness_distant_gpu_remote\r\n    liveness_nearby_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote\r\n \n```SpoofCheckConfig.KeepEvaluatingConditionsAfterFirstFail``` is used\r\n\r\n to evaluate all conditions supplied with ``` Nearby/Distant LivenessConditions ```.\r\n\r\n When ```true``` it can have slight performance impact, because all conditions are evaluated \n",
        "requestBody": {
          "description": "Request containing reference image to be checked and configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SpoofCheckRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoofCheckRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SpoofCheckRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SpoofCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the liveness result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoofCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Faces/Verify": {
      "post": {
        "tags": [
          "Face"
        ],
        "summary": "Calculates confidence that two faces on sent photos belong to the same person.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any",
        "requestBody": {
          "description": "Request containing images with faces to be compared",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the verification result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Frames/{id}": {
      "get": {
        "tags": [
          "Frame"
        ],
        "summary": "Retrieves the frame by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the frame.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frame.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Frame"
                }
              }
            }
          },
          "404": {
            "description": "The frame with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Frame"
        ],
        "summary": "Deletes the frame by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the frame to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The frame with given Id was deleted successfully."
          },
          "404": {
            "description": "The frame with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Frames": {
      "get": {
        "tags": [
          "Frame"
        ],
        "summary": "Retrieves frames as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Images/{id}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Retrieves the image by its Id.",
        "description": "Two optional parameters can be specified that allow the image to be resize to given values.\r\nMore specifically, minSize will resize the smaller edge to minSize, maxSize will resize the larger edge to maxSize.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the image.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "minSize",
            "in": "query",
            "description": "Minimum size of the smaller edge.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxSize",
            "in": "query",
            "description": "Maximum size of the larger edge.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns requested image",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The image with given Id was not found."
          },
          "400": {
            "description": "The sent request was not valid."
          }
        }
      }
    },
    "/api/v1/Individuals/{id}": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves the individual by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Individual"
                }
              }
            }
          },
          "404": {
            "description": "The individual with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Individual"
        ],
        "summary": "Deletes the individual by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The individual with given Id was deleted successfully."
          },
          "404": {
            "description": "The individual with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves individuals as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/{id}/Tracklets": {
      "get": {
        "tags": [
          "Individual"
        ],
        "summary": "Retrieves the tracklets with faces by their individual Id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the individual.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The individual with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Search": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Searches for individuals by image in the specified grouping.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any",
        "requestBody": {
          "description": "Request containing image, grouping id and resources.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The corresponding individuals were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Split": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Splits specified individual, assigns specified tracklets to the newly created individual.",
        "description": "Specified tracklets must be part of the previous individual.",
        "requestBody": {
          "description": "Request containing tracklets and previous individual id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SplitIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created individual was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Individuals/Merge": {
      "post": {
        "tags": [
          "Individual"
        ],
        "summary": "Merges multiple individuals into one individual.",
        "description": "Individuals are merged into a individual, whose id is the first id in the request array of individuals.",
        "requestBody": {
          "description": "Request containing array of individuals to be merged.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeIndividualsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merged individual was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeIndividualsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the live grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Deletes a live grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The live grouping was deleted successfully."
          },
          "404": {
            "description": "The live grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while deleting live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves all live groupings.",
        "responses": {
          "200": {
            "description": "Returns the found live groupings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LiveGrouping"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Creates a new live grouping.",
        "requestBody": {
          "description": "Request containing live grouping properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Live grouping was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Updates the specified live grouping.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveGroupingUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned the newly updated live grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGrouping"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Streams": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves streams belonging to a live grouping with given id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found cameras and edge streams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveGroupingStreams"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Cameras": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves cameras belonging to a live grouping with given id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found cameras.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Camera"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Individuals": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the individuals belonging to a live grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/Frames": {
      "get": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Retrieves the frames belonging to a live grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/LinkStreams": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Links specified streams to a given live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The streams were successfully linked to the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/UnlinkStreams": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Unlink specified streams from a live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The streams were successfully unlinked from the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/LinkCameras": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Links specified cameras to a given live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The cameras were successfully linked to the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/LiveGroupings/{groupingId}/UnlinkCameras": {
      "post": {
        "tags": [
          "LiveGrouping"
        ],
        "summary": "Unlink specified cameras from a live grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the live grouping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing camera ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The camera(s) were successfully unlinked from the live grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The live grouping or cameras were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Palms/SpoofCheck": {
      "post": {
        "tags": [
          "Palms"
        ],
        "summary": "Checks liveness of one palm on the given image.",
        "description": "Supported values for ```PalmDetectorResourceId``` are:\n\r\n\r\n    cpu\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:\n\r\n            \r\n    liveness_any_remote\r\n \n",
        "requestBody": {
          "description": "Request containing reference palm image to be checked and configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmSpoofCheckRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmSpoofCheckRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmSpoofCheckRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmSpoofCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the liveness result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PalmSpoofCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Pedestrians/{id}": {
      "get": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Retrieves the pedestrian by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the pedestrian.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found pedestrian.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pedestrian"
                }
              }
            }
          },
          "404": {
            "description": "The pedestrian with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Deletes the pedestrian by its Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the pedestrian to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pedestrian with given Id was deleted successfully."
          },
          "404": {
            "description": "The pedestrian with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Pedestrians": {
      "get": {
        "tags": [
          "Pedestrian"
        ],
        "summary": "Retrieves pedestrians as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found pedestrians.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PedestrianPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves a record grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Deletes a record grouping by its id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record grouping was deleted successfully."
          },
          "404": {
            "description": "The record grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while deleting record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves all record groupings.",
        "responses": {
          "200": {
            "description": "Returns the found record groupings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordGrouping"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Creates a new record grouping.",
        "requestBody": {
          "description": "Request containing new record grouping configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGroupingCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new record grouping was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new camera.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Updates a specified record grouping.",
        "requestBody": {
          "description": "New record grouping configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RecordGrouping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated record grouping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordGrouping"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/VideoRecords": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves video records belonging to record grouping with given id.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found video records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoRecord"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The video records or record grouping were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Individuals": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves individuals belonging to a record grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Frames": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves frames belonging to a record grouping with given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Image": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Uploads the image to a specified record grouping.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing image data.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedImageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new image was uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while uploading the image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/State": {
      "get": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Retrieves the state of the record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupingState"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/Trigger": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Triggers a start of the record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record grouping started successfully."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/LinkVideoRecords": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Links specified video records to a given record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing video record ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The video record(s) were successfully linked to the record grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping or video records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/RecordGroupings/{groupingId}/UnlinkVideoRecords": {
      "post": {
        "tags": [
          "RecordGrouping"
        ],
        "summary": "Unlinks specified video records from a record grouping.",
        "parameters": [
          {
            "name": "groupingId",
            "in": "path",
            "description": "Id of the record grouping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing video records ids.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkInputRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The video record(s) were successfully unlinked from the record grouping."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The record grouping or video records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/DataStorage/Video": {
      "get": {
        "tags": [
          "SetupDataStorage"
        ],
        "summary": "Retrieves the current video data storage config.",
        "responses": {
          "200": {
            "description": "Video data storage config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video data storage config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupDataStorage"
        ],
        "summary": "Updates the video data storage config with specified values.",
        "requestBody": {
          "description": "The new video data storage configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoDataStorageConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video data storage config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video data storage config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/DbCleanup": {
      "get": {
        "tags": [
          "SetupDbCleanup"
        ],
        "summary": "Retrieves current database cleanup config.",
        "responses": {
          "200": {
            "description": "Database cleanup config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Database cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupDbCleanup"
        ],
        "summary": "Updates the database cleanup config with specified values.",
        "requestBody": {
          "description": "The new database cleanup configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Database cleanup config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Database cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/Features": {
      "get": {
        "tags": [
          "SetupFeatures"
        ],
        "summary": "Retrieves current features config.",
        "responses": {
          "200": {
            "description": "Features config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceFeaturesConfigFeaturesConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Features config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupFeatures"
        ],
        "summary": "Updates the features config with specified values.",
        "requestBody": {
          "description": "The new features configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Features config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceFeaturesConfigFeaturesConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Features config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/Preview": {
      "get": {
        "tags": [
          "SetupPreview"
        ],
        "summary": "Retrieves current preview config.",
        "responses": {
          "200": {
            "description": "Preview config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Preview config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupPreview"
        ],
        "summary": "Updates the preview config with specified values.",
        "description": "Default value for FaceBoundingBoxColor is ```#ecec5e```\r\n\r\nDefault value for PedestrianBoundingBoxColor is ```#80b5ff```\r\n\r\nDefault value for ObjectBoundingBoxColor is ```#e638d3```",
        "requestBody": {
          "description": "The new preview configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Preview config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/SearchSessionsCleanup": {
      "get": {
        "tags": [
          "SetupSearchSessionsCleanup"
        ],
        "summary": "Retrieves current search sessions cleanup config.",
        "responses": {
          "200": {
            "description": "Search sessions cleanup config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Search sessions cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupSearchSessionsCleanup"
        ],
        "summary": "Updates the search sessions cleanup config with specified values.",
        "requestBody": {
          "description": "The new search sessions cleanup configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search sessions cleanup config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Search sessions cleanup config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Setup/Watchlists/AutoLearn": {
      "get": {
        "tags": [
          "SetupWatchlistAutoLearn"
        ],
        "summary": "Retrieves the current watchlist autolearn config.",
        "responses": {
          "200": {
            "description": "Watchlist autolearn config was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlist autolearn config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SetupWatchlistAutoLearn"
        ],
        "summary": "Updates the watchlist autolearn config with specified values.",
        "requestBody": {
          "description": "The new watchlist autolearn configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist autolearn config was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlist autolearn config was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet/{id}": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves the tracklet by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tracklet was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tracklet"
                }
              }
            }
          },
          "404": {
            "description": "The tracklet with specified id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Deletes the tracklets by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tracklet with given Id was deleted successfully."
          },
          "404": {
            "description": "The tracklet with given Id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves tracklets as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Tracklet/{id}/Faces": {
      "get": {
        "tags": [
          "Tracklet"
        ],
        "summary": "Retrieves faces for given tracklet id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the tracklet.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Retrieves the version information.",
        "responses": {
          "200": {
            "description": "Version information was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieve a video record by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned the found video record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "404": {
            "description": "Video record with specified id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Deletes a video record by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Video record was deleted successfully."
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves all video records.",
        "responses": {
          "200": {
            "description": "Returned the found video records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoRecord"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Upserts the specified video record with given values.",
        "description": "Supported values for ```FaceSaveStrategy``` are:\r\n            \r\n    FirstFace, BestFace, \"FirstFace, BestFace\", All, MatchedOnly",
        "requestBody": {
          "description": "New video record values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video record was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Creates a video record.",
        "description": "Supported values for ```FaceSaveStrategy``` are:\r\n            \r\n    FirstFace, BestFace, \"FirstFace, BestFace\", All, MatchedOnly",
        "requestBody": {
          "description": "Request specifying video record properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Video record was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecord"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Tracklets": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves tracklets belonging to a video record with the given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tracklets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackletPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video record with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Frames": {
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves the frames belonging to video record with the given id.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found frames.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FramePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Video record with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Clear": {
      "post": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Clears the data produced by the video record (faces, tracklet, matches...) and set the state back to `Ready`",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Video record data was cleaned successfully."
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/VideoRecords/{id}/Tags": {
      "put": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Updates the tags of specified video record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New tags for video record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordTagsUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordTagsUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordTagsUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRecordTagsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video record was updated successfully with tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecordTags"
                }
              }
            }
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "VideoRecord"
        ],
        "summary": "Retrieves the tags of specified video record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the video record.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoRecordTags"
                }
              }
            }
          },
          "404": {
            "description": "Specified video record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlists as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Creates a new watchlist.",
        "description": "When setting ```PreviewColor```, hexadecimal format is necessary to use, e.g. ```#012abc``` or ```#01a```.",
        "requestBody": {
          "description": "Request containing watchlist name and threshold.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new watchlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Upserts the watchlist.",
        "description": "If the watchlist with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist with specified Id exists, it updates it.\n\r\nWhen setting ```PreviewColor```, hexadecimal format is necessary to use, e.g. ```#012abc``` or ```#01a```.",
        "requestBody": {
          "description": "Request containing watchlist properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistUpsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/{id}": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlist by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchlist"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Deletes a watchlist by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The watchlist with given id was deleted successfully."
          },
          "404": {
            "description": "The watchlist with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/{id}/WatchlistMembers": {
      "get": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Retrieves the watchlist members belonging to a watchlist with specified watchlist id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/Search": {
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Searches for matching watchlist members by provided image of face/s.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:\n\r\n            \r\n    none,\r\n    liveness_distant_any_remote, liveness_distant_cpu_remote, liveness_distant_gpu_remote\r\n    liveness_nearby_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote\r\nSupported values for ```FaceValidationMode``` are:\n\r\n            \r\n    none, predefined",
        "requestBody": {
          "description": "Request containing searching image and ids of watchlists to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the match results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchInWatchlistResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlists with specified ids were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Detected face did not pass validation and is not suitable to perform search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/SearchByTemplate": {
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Searches for matching watchlist members by provided face template/s.",
        "requestBody": {
          "description": "Request containing face template and ids of watchlists to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistByTemplateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistByTemplateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistByTemplateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInWatchlistByTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the match results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInWatchlistByTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlists with specified ids were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/SearchByPalm": {
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Searches for matching watchlist members by provided image of palm/s.",
        "description": "Supported values for ```PalmDetectorResourceId``` are:\n\r\n            \r\n    cpu\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:\n\r\n            \r\n    none, liveness_any_remote",
        "requestBody": {
          "description": "Request containing searching image and ids of watchlists to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the match results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchByPalmInWatchlistResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlists with specified ids were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Palm modality is not enabled in license.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Detected palm did not pass validation and is not suitable to perform search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Watchlists/SearchByPalmTemplate": {
      "post": {
        "tags": [
          "Watchlist"
        ],
        "summary": "Searches for matching watchlist members by provided palm template/s.",
        "requestBody": {
          "description": "Request containing palm template and ids of watchlists to be searched.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistByTemplateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistByTemplateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistByTemplateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByPalmInWatchlistByTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the match results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchByPalmInWatchlistByTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Watchlists with specified ids were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Palm modality is not enabled in license.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves the watchlist members as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Creates a new watchlist member.",
        "requestBody": {
          "description": "Request specifying watchlist member properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist member was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the new watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Upserts the watchlist member.",
        "description": "If the watchlist member with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist member with specified Id exists, it updates it.",
        "requestBody": {
          "description": "Request specifying which watchlist member should be updated and how to update it.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist member was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves the watchlist member by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMember"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Deletes a watchlist member by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The watchlist member with given id was deleted successfully."
          },
          "404": {
            "description": "The watchlist member with given id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/Faces": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves faces for given watchlist member id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found faces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacePagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/Palms": {
      "get": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Retrieves palms for given watchlist member id as a paged collection.",
        "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the watchlist member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ascending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShowTotalCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found palms.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PalmPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/LinkToWatchlist": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Links specified watchlist members to a given watchlist.",
        "requestBody": {
          "description": "Request specifying watchlist member ids and watchlist id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Watchlist members were successfully linked to the watchlist."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist or watchlist members were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/UnlinkFromWatchlist": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Unlinks specified watchlist members for a given watchlist.",
        "requestBody": {
          "description": "Request specifying watchlist member ids and watchlist id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Watchlist members were successfully unlinked from the watchlist."
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist or watchlist members were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/Register": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Registers a watchlist member.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n\r\n    cpu, gpu, any\r\n            \r\nSupported values for ```PalmDetectorResourceId``` are:\n\r\n\r\n    cpu\r\nSupported values for ```FaceValidationMode``` are:\n\r\n            \r\n    none, predefined\r\nSupported values for ```PalmSide``` are:\n\r\n\r\n    Left, Right, Unspecified",
        "requestBody": {
          "description": "Request specifying watchlist member register details.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Watchlist members was registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberWithRelatedData"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A concurrent transient error occurred, or the license conditions were not met.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Detected face or palm did not pass validation and is not suitable for use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddFaceFromSystem": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified face to a given watchlist member.",
        "description": "Supported values for ```FaceValidationMode``` are:\n\r\n            \r\n    none, predefined",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying face id to add.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The face was successfully added to the watchlist member."
          },
          "404": {
            "description": "The face or watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict adding the specified face to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Face did not pass validation and is not suitable for use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddNewFace": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified face to a given watchlist member.",
        "description": "Supported values for ```FaceDetectorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:\n\r\n            \r\n    cpu, gpu, any\r\nSupported values for ```FaceValidationMode``` are:\n\r\n            \r\n    none, predefined",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The image with face to add with configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewFaceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created face which was added to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Face"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict adding the new face to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Face did not pass validation and is not suitable for use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddNewPalm": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified palm to a given watchlist member.",
        "description": "Supported values for ```PalmDetectorResourceId``` are:\n\r\n            \r\n    cpu\r\nSupported values for ```PalmSide``` are:\n\r\n\r\n    Left, Right, Unspecified",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The image with palm to add with configuration.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewPalmRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewPalmRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewPalmRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewPalmRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created palm which was added to the watchlist member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Palm"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Detected palm did not pass validation and is not suitable to perform search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/AddPalmFromSystem": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Adds a specified palm to a given watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying palm id to add.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberLinkingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberLinkingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberLinkingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberLinkingRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The palm was successfully added to the watchlist member."
          },
          "404": {
            "description": "The palm or watchlist member were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Detected palm did not pass validation and is not suitable to perform search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/RemoveFace": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Removes a face from a watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying face id to remove.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The face was successfully removed from watchlist member."
          },
          "404": {
            "description": "The face or watchlist member was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request has timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/RemovePalm": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Removes a palm from a watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying palm id to remove.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberRemoveRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberRemoveRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberRemoveRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PalmWatchlistMemberRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The palm was successfully removed from watchlist member."
          },
          "404": {
            "description": "The palm or watchlist member was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The sent request was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/WatchlistMembers/{id}/Totp/CreateAndStoreTotpSecret": {
      "post": {
        "tags": [
          "WatchlistMember"
        ],
        "summary": "Creates a new TOTP secret for the watchlist member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The watchlist member id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP secret was successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotpSecretResponse"
                }
              }
            }
          },
          "404": {
            "description": "The watchlist member was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddNewFaceRequest": {
        "required": [
          "imageData"
        ],
        "type": "object",
        "properties": {
          "imageData": {
            "$ref": "#/components/schemas/FaceRegistrationImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "faceValidationMode": {
            "type": "string",
            "default": "predefined",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewPalmRequest": {
        "required": [
          "imageData"
        ],
        "type": "object",
        "properties": {
          "imageData": {
            "$ref": "#/components/schemas/PalmRegistrationImageData"
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/PalmDetectorConfig"
          },
          "palmDetectorResourceId": {
            "type": "string"
          },
          "palmValidationMode": {
            "type": "string",
            "default": "predefined",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeType": {
        "enum": [
          "Hat",
          "Glasses",
          "ShortSleeve",
          "LongSleeve",
          "UpperStripe",
          "UpperLogo",
          "UpperPlaid",
          "UpperSplice",
          "LowerStripe",
          "LowerPattern",
          "LongCoat",
          "Trousers",
          "Shorts",
          "SkirtOrDress",
          "Boots",
          "HandBag",
          "ShoulderBag",
          "Backpack",
          "HoldObjectsInFront",
          "IsSenior",
          "IsAdult",
          "IsChild",
          "IsMale",
          "IsFemale",
          "Front",
          "Side",
          "Back",
          "HatConfidence",
          "GlassesConfidence",
          "ShortSleeveConfidence",
          "LongSleeveConfidence",
          "UpperStripeConfidence",
          "UpperLogoConfidence",
          "UpperPlaidConfidence",
          "UpperSpliceConfidence",
          "LowerStripeConfidence",
          "LowerPatternConfidence",
          "LongCoatConfidence",
          "TrousersConfidence",
          "ShortsConfidence",
          "SkirtOrDressConfidence",
          "BootsConfidence",
          "HandBagConfidence",
          "ShoulderBagConfidence",
          "BackpackConfidence",
          "HoldObjectsInFrontConfidence",
          "IsSeniorConfidence",
          "IsAdultConfidence",
          "IsChildConfidence",
          "FemaleConfidence",
          "FrontConfidence",
          "SideConfidence",
          "BackConfidence"
        ],
        "type": "string"
      },
      "Camera": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "objectDetectorConfig",
          "objectDetectorResourceId",
          "objectSaveStrategy",
          "palmDetectorConfig",
          "palmDetectorResourceId",
          "palmSpoofDetectorConfig",
          "palmSpoofDetectorResourceIds",
          "palmTemplateGeneratorResourceId",
          "pedestrianDetectorConfig",
          "pedestrianDetectorResourceId",
          "pedestrianExtractorResourceId",
          "pedestrianSaveStrategy",
          "previewAttributesConfig",
          "previewMaxDimension",
          "redetectionTime",
          "saveFrameImageData",
          "serviceName",
          "source",
          "spoofDetectorConfig",
          "spoofDetectorResourceIds",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization",
          "trackSpeedAccuracyMode"
        ],
        "type": "object",
        "properties": {
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/VideoPedestrianDetectorConfig"
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/VideoPalmDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "pedestrianDetectorResourceId": {
            "type": "string"
          },
          "pedestrianExtractorResourceId": {
            "type": "string"
          },
          "palmDetectorResourceId": {
            "type": "string"
          },
          "palmTemplateGeneratorResourceId": {
            "type": "string"
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string"
          },
          "trackSpeedAccuracyMode": {
            "type": "string"
          },
          "faceSaveStrategy": {
            "type": "string"
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "objectSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean"
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32"
          },
          "serviceName": {
            "type": "string"
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraSpoofDetectorConfig"
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraPalmSpoofDetectorConfig"
          },
          "previewAttributesConfig": {
            "$ref": "#/components/schemas/PreviewAttributesConfig"
          },
          "objectDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "objectDetectorConfig": {
            "$ref": "#/components/schemas/ObjectDetectorConfig"
          }
        },
        "additionalProperties": false
      },
      "CameraCreateRequest": {
        "required": [
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "default": "camera name"
          },
          "source": {
            "minLength": 1,
            "type": "string",
            "default": "rtsp://user:password@cameraHostnameOrIp:554/Streaming/Channels/101"
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfigCreateRequest"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/PedestrianDetectorConfigCreateRequest"
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/PalmDetectorConfigCreateRequest"
          },
          "pedestrianDetectorResourceId": {
            "type": "string",
            "default": "none",
            "nullable": true
          },
          "pedestrianExtractorResourceId": {
            "type": "string",
            "default": "none",
            "nullable": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "palmDetectorResourceId": {
            "type": "string",
            "default": "none",
            "nullable": true
          },
          "palmTemplateGeneratorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32",
            "default": 500,
            "nullable": true
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32",
            "default": 500,
            "nullable": true
          },
          "trackMotionOptimization": {
            "type": "string",
            "default": "track.motion_optimization.history_long.fast",
            "nullable": true
          },
          "trackSpeedAccuracyMode": {
            "type": "string",
            "default": "accurate",
            "nullable": true
          },
          "faceSaveStrategy": {
            "type": "string",
            "default": "FirstFace, BestFace",
            "nullable": true
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "default": "Best",
            "nullable": true
          },
          "maskImagePath": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32",
            "default": 90,
            "nullable": true
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "default": 450000,
            "nullable": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "default": 640,
            "nullable": true
          },
          "serviceName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ],
            "nullable": true
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ],
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraSpoofDetectorConfigCreateRequest"
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraPalmSpoofDetectorConfigCreateRequest"
          },
          "previewAttributesConfig": {
            "$ref": "#/components/schemas/PreviewAttributesConfigCreateRequest"
          },
          "objectDetectorResourceId": {
            "type": "string",
            "default": "none",
            "nullable": true
          },
          "objectSaveStrategy": {
            "type": "string",
            "default": "Best",
            "nullable": true
          },
          "objectDetectorConfig": {
            "$ref": "#/components/schemas/ObjectDetectorConfigCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "CameraPalmSpoofDetectorConfig": {
        "required": [
          "livenessScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CameraPalmSpoofDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 85,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CameraPalmSpoofDetectorConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 85,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CameraSpoofDetectorConfig": {
        "required": [
          "distantLivenessConditions",
          "distantLivenessScoreThreshold",
          "externalScoreThreshold",
          "nearbyLivenessConditions",
          "nearbyLivenessScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "externalScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "distantLivenessConditions": {
            "type": "string"
          },
          "nearbyLivenessConditions": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CameraSpoofDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "externalScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 0,
            "nullable": true
          },
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90,
            "nullable": true
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90,
            "nullable": true
          },
          "distantLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CameraSpoofDetectorConfigUpdateRequest": {
        "required": [
          "externalScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "externalScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "distantLivenessConditions": {
            "type": "string",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CameraUpdateRequest": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "previewMaxDimension",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/VideoPedestrianDetectorConfig"
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/VideoPalmDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "pedestrianDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "pedestrianExtractorResourceId": {
            "type": "string",
            "nullable": true
          },
          "palmDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "palmTemplateGeneratorResourceId": {
            "type": "string",
            "nullable": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string"
          },
          "trackSpeedAccuracyMode": {
            "type": "string",
            "nullable": true
          },
          "faceSaveStrategy": {
            "type": "string"
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean"
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraSpoofDetectorConfigUpdateRequest"
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/CameraPalmSpoofDetectorConfigUpdateRequest"
          },
          "previewAttributesConfig": {
            "$ref": "#/components/schemas/PreviewAttributesConfigUpdateRequest"
          },
          "objectDetectorResourceId": {
            "type": "string",
            "nullable": true
          },
          "objectSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "objectDetectorConfig": {
            "$ref": "#/components/schemas/ObjectDetectorConfigUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "CropCoordinates": {
        "type": "object",
        "properties": {
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DbCleanupConfig": {
        "required": [
          "cleanupAmount",
          "cleanupStart",
          "deleteMatchResults",
          "deleteSql",
          "enabled",
          "maxFramesCount",
          "maxImageDataAge"
        ],
        "type": "object",
        "properties": {
          "cleanupAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "enabled": {
            "type": "boolean"
          },
          "maxFramesCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxImageDataAge": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cleanupStart": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "deleteSql": {
            "type": "boolean",
            "nullable": true
          },
          "deleteMatchResults": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DbCleanupConfigUpdateRequest": {
        "required": [
          "cleanupStart",
          "deleteMatchResults",
          "deleteSql",
          "enabled",
          "maxFramesCount",
          "maxImageDataAge"
        ],
        "type": "object",
        "properties": {
          "cleanupAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "enabled": {
            "type": "boolean"
          },
          "maxFramesCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxImageDataAge": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cleanupStart": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "deleteSql": {
            "type": "boolean",
            "nullable": true
          },
          "deleteMatchResults": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DetectionRequest": {
        "required": [
          "image",
          "objectDetectorResourceId",
          "pedestrianDetectorResourceId"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "pedestrianDetectorResourceId": {
            "minLength": 1,
            "type": "string",
            "default": "none"
          },
          "pedestrianDetectorConfig": {
            "$ref": "#/components/schemas/PedestrianDetectorConfigCreateRequest"
          },
          "objectDetectorResourceId": {
            "minLength": 1,
            "type": "string",
            "default": "none"
          },
          "objectDetectorConfig": {
            "$ref": "#/components/schemas/ObjectDetectorConfigCreateRequest"
          },
          "includeCrops": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "DetectionResponse": {
        "type": "object",
        "properties": {
          "pedestrians": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PedestrianInformation"
            },
            "nullable": true
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectInformation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStream": {
        "required": [
          "clientId",
          "enabled",
          "faceSaveStrategy",
          "id",
          "name",
          "objectSaveStrategy",
          "palmSpoofDetectorConfig",
          "palmSpoofDetectorResourceIds",
          "pedestrianSaveStrategy",
          "saveFrameImageData",
          "settings",
          "spoofDetectorConfig",
          "spoofDetectorResourceIds",
          "templateGeneratorResourceId"
        ],
        "type": "object",
        "properties": {
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "faceSaveStrategy": {
            "type": "string"
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/SpoofDetectorConfig"
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/EdgeStreamPalmSpoofDetectorConfig"
          },
          "settings": {
            "$ref": "#/components/schemas/EdgeStreamSettings"
          },
          "objectSaveStrategy": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamCreateRequest": {
        "required": [
          "clientId",
          "name"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "default": "unspecified"
          },
          "clientId": {
            "minLength": 1,
            "type": "string"
          },
          "saveFrameImageData": {
            "type": "boolean",
            "default": false
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "faceSaveStrategy": {
            "type": "string",
            "default": "FirstFace, BestFace",
            "nullable": true
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "default": "Balanced",
            "nullable": true
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ],
            "nullable": true
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ],
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/EdgeStreamSpoofDetectorConfigCreateRequest"
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/EdgeStreamPalmSpoofDetectorConfigCreateRequest"
          },
          "settings": {
            "$ref": "#/components/schemas/EdgeStreamSettingsCreateRequest"
          },
          "objectSaveStrategy": {
            "type": "string",
            "default": "Balanced",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionCropSettings": {
        "required": [
          "enable",
          "imageFormat",
          "imageQuality",
          "maxSize"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "maxSize": {
            "type": "number",
            "format": "float"
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionCropSettingsCreateRequest": {
        "required": [
          "enable",
          "imageFormat",
          "imageQuality",
          "maxSize"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "maxSize": {
            "type": "number",
            "format": "float",
            "default": 50
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float",
            "default": 90
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionCropSettingsUpdateRequest": {
        "required": [
          "enable",
          "imageFormat",
          "imageQuality",
          "maxSize"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "maxSize": {
            "type": "number",
            "format": "float",
            "default": 50
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float",
            "default": 90
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionOrderBy": {
        "enum": [
          "DetectionConfidence",
          "FaceSize"
        ],
        "type": "string"
      },
      "EdgeStreamFaceDetectionSettings": {
        "required": [
          "crop",
          "enable",
          "maxDetections",
          "maxFaceSize",
          "minFaceSize",
          "orderBy",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32"
          },
          "minFaceSize": {
            "type": "number",
            "format": "float"
          },
          "maxFaceSize": {
            "type": "number",
            "format": "float"
          },
          "orderBy": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettings"
          },
          "crop": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettings"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionSettingsCreateRequest": {
        "required": [
          "crop",
          "enable",
          "maxDetections",
          "maxFaceSize",
          "minFaceSize",
          "orderBy",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "minFaceSize": {
            "type": "number",
            "format": "float",
            "default": 20
          },
          "maxFaceSize": {
            "type": "number",
            "format": "float",
            "default": 200
          },
          "orderBy": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettingsCreateRequest"
          },
          "crop": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettingsCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionSettingsUpdateRequest": {
        "required": [
          "crop",
          "enable",
          "maxDetections",
          "maxFaceSize",
          "minFaceSize",
          "orderBy",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "minFaceSize": {
            "type": "number",
            "format": "float",
            "default": 20
          },
          "maxFaceSize": {
            "type": "number",
            "format": "float",
            "default": 200
          },
          "orderBy": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettingsUpdateRequest"
          },
          "crop": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettingsUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionTrackingSettings": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float"
          },
          "inputThreshold": {
            "type": "number",
            "format": "float"
          },
          "stability": {
            "type": "number",
            "format": "float"
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionTrackingSettingsCreateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 1500
          },
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 1000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceDetectionTrackingSettingsUpdateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 1500
          },
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 1000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceExtractionSettings": {
        "required": [
          "enable"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceExtractionSettingsCreateRequest": {
        "required": [
          "enable"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceExtractionSettingsUpdateRequest": {
        "required": [
          "enable"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceIdentificationSettings": {
        "required": [
          "enable",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "threshold": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceIdentificationSettingsCreateRequest": {
        "required": [
          "enable",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "threshold": {
            "type": "number",
            "format": "float",
            "default": 40
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceIdentificationSettingsUpdateRequest": {
        "required": [
          "enable",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "threshold": {
            "type": "number",
            "format": "float",
            "default": 40
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceLivenessPassiveCondition": {
        "required": [
          "lowerThreshold",
          "parameter",
          "upperThreshold"
        ],
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string"
          },
          "lowerThreshold": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "upperThreshold": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceLivenessPassiveSettings": {
        "required": [
          "conditions",
          "enable",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
            }
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceLivenessPassiveSettingsCreateRequest": {
        "required": [
          "conditions",
          "enable",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
            }
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFaceLivenessPassiveSettingsUpdateRequest": {
        "required": [
          "conditions",
          "enable",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
            }
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFullFrameSettings": {
        "required": [
          "imageFormat",
          "imageHeight",
          "imageQuality",
          "imageWidth"
        ],
        "type": "object",
        "properties": {
          "imageWidth": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "imageHeight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFullFrameSettingsCreateRequest": {
        "required": [
          "imageFormat",
          "imageQuality"
        ],
        "type": "object",
        "properties": {
          "imageWidth": {
            "type": "integer",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "imageHeight": {
            "type": "integer",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float",
            "default": 90
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamFullFrameSettingsUpdateRequest": {
        "required": [
          "imageFormat",
          "imageQuality"
        ],
        "type": "object",
        "properties": {
          "imageWidth": {
            "type": "integer",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "imageHeight": {
            "type": "integer",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "imageFormat": {
            "$ref": "#/components/schemas/EdgeStreamImageFormat"
          },
          "imageQuality": {
            "type": "number",
            "format": "float",
            "default": 90
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamImageFormat": {
        "enum": [
          "Raw",
          "Jpeg",
          "Png"
        ],
        "type": "string"
      },
      "EdgeStreamLicenseSettingsCreateRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte",
            "default": null
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamLicenseSettingsUpdateRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte",
            "default": null
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamLivenessStrategy": {
        "enum": [
          "OnEachExtractedFace",
          "OnEachIdentifiedFace"
        ],
        "type": "string"
      },
      "EdgeStreamMessagingSettings": {
        "required": [
          "allowEmptyMessages",
          "enable",
          "identifiedOnly",
          "interval",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          },
          "allowEmptyMessages": {
            "type": "boolean"
          },
          "identifiedOnly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamMessagingSettingsCreateRequest": {
        "required": [
          "allowEmptyMessages",
          "enable",
          "interval",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
          },
          "interval": {
            "type": "integer",
            "format": "int32",
            "default": 250
          },
          "allowEmptyMessages": {
            "type": "boolean",
            "default": false
          },
          "identifiedOnly": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamMessagingSettingsUpdateRequest": {
        "required": [
          "allowEmptyMessages",
          "enable",
          "interval",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": true
          },
          "strategy": {
            "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
          },
          "interval": {
            "type": "integer",
            "format": "int32",
            "default": 250
          },
          "allowEmptyMessages": {
            "type": "boolean",
            "default": false
          },
          "identifiedOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamMessagingStrategy": {
        "enum": [
          "OnNewAndInterval",
          "OnNewAndIntervalBest"
        ],
        "type": "string"
      },
      "EdgeStreamPalmDetectionSettings": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32"
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionTrackingSettings"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmDetectionSettingsCreateRequest": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float",
            "default": 1.25
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionTrackingSettingsCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmDetectionSettingsUpdateRequest": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float",
            "default": 1.25
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionTrackingSettingsUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmDetectionTrackingSettings": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float"
          },
          "inputThreshold": {
            "type": "number",
            "format": "float"
          },
          "stability": {
            "type": "number",
            "format": "float"
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmDetectionTrackingSettingsCreateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmDetectionTrackingSettingsUpdateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmSpoofDetectorConfig": {
        "required": [
          "livenessScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmSpoofDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 85,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPalmSpoofDetectorConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 85,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionSettings": {
        "required": [
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionTrackingSettings"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionSettingsCreateRequest": {
        "required": [
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionTrackingSettingsCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionSettingsUpdateRequest": {
        "required": [
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionTrackingSettingsUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionTrackingSettings": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float"
          },
          "inputThreshold": {
            "type": "number",
            "format": "float"
          },
          "stability": {
            "type": "number",
            "format": "float"
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionTrackingSettingsCreateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 5000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 5000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamPedestrianDetectionTrackingSettingsUpdateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 5000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 5000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamSettings": {
        "required": [
          "faceDetection",
          "faceExtraction",
          "faceIdentification",
          "faceLivenessPassive",
          "fullFrame",
          "messaging",
          "palmDetection",
          "pedestrianDetection",
          "visualCodeDetection"
        ],
        "type": "object",
        "properties": {
          "visualCodeDetection": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionSettings"
          },
          "palmDetection": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionSettings"
          },
          "pedestrianDetection": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionSettings"
          },
          "faceDetection": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettings"
          },
          "faceExtraction": {
            "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettings"
          },
          "faceLivenessPassive": {
            "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettings"
          },
          "faceIdentification": {
            "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettings"
          },
          "messaging": {
            "$ref": "#/components/schemas/EdgeStreamMessagingSettings"
          },
          "fullFrame": {
            "$ref": "#/components/schemas/EdgeStreamFullFrameSettings"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamSettingsCreateRequest": {
        "required": [
          "faceDetection",
          "faceExtraction",
          "faceIdentification",
          "faceLivenessPassive",
          "fullFrame",
          "messaging"
        ],
        "type": "object",
        "properties": {
          "faceDetection": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettingsCreateRequest"
          },
          "visualCodeDetection": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionSettingsCreateRequest"
          },
          "palmDetection": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionSettingsCreateRequest"
          },
          "pedestrianDetection": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionSettingsCreateRequest"
          },
          "faceExtraction": {
            "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettingsCreateRequest"
          },
          "faceLivenessPassive": {
            "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettingsCreateRequest"
          },
          "faceIdentification": {
            "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettingsCreateRequest"
          },
          "messaging": {
            "$ref": "#/components/schemas/EdgeStreamMessagingSettingsCreateRequest"
          },
          "fullFrame": {
            "$ref": "#/components/schemas/EdgeStreamFullFrameSettingsCreateRequest"
          },
          "license": {
            "$ref": "#/components/schemas/EdgeStreamLicenseSettingsCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamSettingsUpdateRequest": {
        "required": [
          "faceDetection",
          "faceExtraction",
          "faceIdentification",
          "faceLivenessPassive",
          "fullFrame",
          "messaging"
        ],
        "type": "object",
        "properties": {
          "visualCodeDetection": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionSettingsUpdateRequest"
          },
          "palmDetection": {
            "$ref": "#/components/schemas/EdgeStreamPalmDetectionSettingsUpdateRequest"
          },
          "pedestrianDetection": {
            "$ref": "#/components/schemas/EdgeStreamPedestrianDetectionSettingsUpdateRequest"
          },
          "faceDetection": {
            "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettingsUpdateRequest"
          },
          "faceExtraction": {
            "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettingsUpdateRequest"
          },
          "faceLivenessPassive": {
            "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettingsUpdateRequest"
          },
          "faceIdentification": {
            "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettingsUpdateRequest"
          },
          "messaging": {
            "$ref": "#/components/schemas/EdgeStreamMessagingSettingsUpdateRequest"
          },
          "fullFrame": {
            "$ref": "#/components/schemas/EdgeStreamFullFrameSettingsUpdateRequest"
          },
          "license": {
            "$ref": "#/components/schemas/EdgeStreamLicenseSettingsUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamSpoofDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90,
            "nullable": true
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90,
            "nullable": true
          },
          "distantLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamSpoofDetectorConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "distantLivenessConditions": {
            "type": "string",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamUpdateRequest": {
        "required": [
          "clientId",
          "enabled",
          "faceSaveStrategy",
          "id",
          "name",
          "templateGeneratorResourceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "clientId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "saveFrameImageData": {
            "type": "boolean",
            "nullable": true
          },
          "templateGeneratorResourceId": {
            "type": "string"
          },
          "faceSaveStrategy": {
            "type": "string"
          },
          "pedestrianSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "palmSpoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "spoofDetectorConfig": {
            "$ref": "#/components/schemas/EdgeStreamSpoofDetectorConfigUpdateRequest"
          },
          "palmSpoofDetectorConfig": {
            "$ref": "#/components/schemas/EdgeStreamPalmSpoofDetectorConfigUpdateRequest"
          },
          "settings": {
            "$ref": "#/components/schemas/EdgeStreamSettingsUpdateRequest"
          },
          "objectSaveStrategy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionSettings": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32"
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float"
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionTrackingSettings"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionSettingsCreateRequest": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float",
            "default": 1.2
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionTrackingSettingsCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionSettingsUpdateRequest": {
        "required": [
          "boundingBoxExtension",
          "enable",
          "maxDetections",
          "tracking"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false
          },
          "maxDetections": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "boundingBoxExtension": {
            "type": "number",
            "format": "float",
            "default": 1.2
          },
          "tracking": {
            "$ref": "#/components/schemas/EdgeStreamVisualCodeDetectionTrackingSettingsUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionTrackingSettings": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "outputThreshold": {
            "type": "number",
            "format": "float"
          },
          "inputThreshold": {
            "type": "number",
            "format": "float"
          },
          "stability": {
            "type": "number",
            "format": "float"
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionTrackingSettingsCreateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamVisualCodeDetectionTrackingSettingsUpdateRequest": {
        "required": [
          "inputThreshold",
          "maxFramesLost",
          "outputThreshold",
          "stability"
        ],
        "type": "object",
        "properties": {
          "inputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "outputThreshold": {
            "type": "number",
            "format": "float",
            "default": 6000
          },
          "stability": {
            "type": "number",
            "format": "float",
            "default": 85
          },
          "maxFramesLost": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamWatchlistSynchronization": {
        "required": [
          "watchlistSyncOption"
        ],
        "type": "object",
        "properties": {
          "watchlistSyncOption": {
            "type": "string"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdgeStreamWatchlistSynchronizationRequest": {
        "required": [
          "watchlistSyncOption"
        ],
        "type": "object",
        "properties": {
          "watchlistSyncOption": {
            "minLength": 1,
            "type": "string",
            "default": "None"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Face": {
        "required": [
          "age",
          "autolearnClusterType",
          "brightness",
          "createdAt",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "faceArea",
          "faceAreaChange",
          "faceMaskConfidence",
          "faceMaskStatus",
          "faceOrder",
          "facesOnFrameCount",
          "frameId",
          "gender",
          "glassStatus",
          "heavyFrame",
          "id",
          "imageDataId",
          "leftEyeX",
          "leftEyeY",
          "noseTipConfidence",
          "pitchAngle",
          "processedAt",
          "quality",
          "rightEyeX",
          "rightEyeY",
          "rollAngle",
          "sharpness",
          "size",
          "state",
          "templateQuality",
          "tintedGlasses",
          "trackletId",
          "type",
          "updatedAt",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "trackletId": {
            "type": "string",
            "format": "uuid"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "templateQuality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/FaceState"
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "leftEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leftEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/FaceType"
          },
          "age": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gender": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseTipConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskStatus": {
            "$ref": "#/components/schemas/FaceMaskStatus"
          },
          "faceArea": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "faceOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "facesOnFrameCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "faceAreaChange": {
            "type": "number",
            "format": "double"
          },
          "yawAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pitchAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rollAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "autolearnClusterType": {
            "type": "string",
            "nullable": true
          },
          "sharpness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "brightness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tintedGlasses": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "heavyFrame": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "glassStatus": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceAttributes": {
        "required": [
          "age",
          "brightness",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "faceArea",
          "faceMaskConfidence",
          "faceMaskStatus",
          "faceOrder",
          "faceSize",
          "gender",
          "glassStatus",
          "heavyFrame",
          "leftEyeX",
          "leftEyeY",
          "noseTipConfidence",
          "pitchAngle",
          "quality",
          "rightEyeX",
          "rightEyeY",
          "rollAngle",
          "sharpness",
          "templateQuality",
          "tintedGlasses",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "leftEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leftEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "age": {
            "type": "number",
            "format": "double"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderType"
          },
          "faceSize": {
            "type": "number",
            "format": "double"
          },
          "faceMaskConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseTipConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskStatus": {
            "$ref": "#/components/schemas/FaceMaskStatus"
          },
          "sharpness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "brightness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tintedGlasses": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "heavyFrame": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "glassStatus": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pitchAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "yawAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rollAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceArea": {
            "type": "number",
            "format": "double"
          },
          "templateQuality": {
            "type": "integer",
            "format": "int32"
          },
          "faceOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FaceDetectorConfig": {
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 35
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 600
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 450
          }
        },
        "additionalProperties": false
      },
      "FaceDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 35,
            "nullable": true
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 600,
            "nullable": true
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "nullable": true
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 450,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceFeaturesConfig": {
        "required": [
          "age",
          "brightness",
          "faceMask",
          "gender",
          "glassStatus",
          "heavyFrame",
          "noseTip",
          "pitchAngle",
          "rollAngle",
          "sharpness",
          "tintedGlasses",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "age": {
            "type": "boolean",
            "default": true
          },
          "gender": {
            "type": "boolean",
            "default": true
          },
          "faceMask": {
            "type": "boolean",
            "default": true
          },
          "noseTip": {
            "type": "boolean",
            "default": true
          },
          "yawAngle": {
            "type": "boolean",
            "default": true
          },
          "pitchAngle": {
            "type": "boolean",
            "default": true
          },
          "rollAngle": {
            "type": "boolean",
            "default": true
          },
          "sharpness": {
            "type": "boolean",
            "default": true
          },
          "brightness": {
            "type": "boolean",
            "default": true
          },
          "tintedGlasses": {
            "type": "boolean",
            "default": true
          },
          "heavyFrame": {
            "type": "boolean",
            "default": true
          },
          "glassStatus": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "FaceFeaturesConfigFeaturesConfig": {
        "required": [
          "faceFeaturesConfig"
        ],
        "type": "object",
        "properties": {
          "faceFeaturesConfig": {
            "$ref": "#/components/schemas/FaceFeaturesConfig"
          }
        },
        "additionalProperties": false
      },
      "FaceMaskConfidenceRequest": {
        "required": [
          "faceMaskThreshold"
        ],
        "type": "object",
        "properties": {
          "faceMaskThreshold": {
            "type": "number",
            "format": "double",
            "default": 3000
          }
        },
        "additionalProperties": false
      },
      "FaceMaskStatus": {
        "enum": [
          "Unknown",
          "Mask",
          "NoMask"
        ],
        "type": "string"
      },
      "FacePagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Face"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceProbe": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceSearchDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu"
          }
        },
        "additionalProperties": false
      },
      "FaceRegistrationImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid",
            "default": null,
            "nullable": true
          },
          "data": {
            "type": "string",
            "format": "byte",
            "default": ""
          }
        },
        "additionalProperties": false
      },
      "FaceSearchDetectorConfig": {
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 35
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 600
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 450
          }
        },
        "additionalProperties": false
      },
      "FaceSearchRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 30
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceSearchDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu"
          }
        },
        "additionalProperties": false
      },
      "FaceState": {
        "enum": [
          "New",
          "Extracting",
          "Extracted",
          "Error"
        ],
        "type": "string"
      },
      "FaceType": {
        "enum": [
          "Regular",
          "AutoLearn"
        ],
        "type": "string"
      },
      "FaceWatchlistMemberLinkingRequest": {
        "required": [
          "faceId",
          "faceValidationMode"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid"
          },
          "faceValidationMode": {
            "minLength": 1,
            "type": "string",
            "default": "predefined"
          }
        },
        "additionalProperties": false
      },
      "FaceWatchlistMemberRemoveRequest": {
        "required": [
          "faceId"
        ],
        "type": "object",
        "properties": {
          "faceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "FailReason": {
        "type": "object",
        "properties": {
          "reasonMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeaturesConfigUpdateRequest": {
        "required": [
          "age",
          "faceMask",
          "gender",
          "noseTip",
          "pitchAngle",
          "rollAngle",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "age": {
            "type": "boolean",
            "default": true
          },
          "gender": {
            "type": "boolean",
            "default": true
          },
          "faceMask": {
            "type": "boolean",
            "default": true
          },
          "noseTip": {
            "type": "boolean",
            "default": true
          },
          "yawAngle": {
            "type": "boolean",
            "default": true
          },
          "pitchAngle": {
            "type": "boolean",
            "default": true
          },
          "rollAngle": {
            "type": "boolean",
            "default": true
          },
          "sharpness": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "brightness": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "tintedGlasses": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "heavyFrame": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "glassStatus": {
            "type": "boolean",
            "default": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeaturesConfigUpdateRequestFeaturesConfig": {
        "required": [
          "faceFeaturesConfig"
        ],
        "type": "object",
        "properties": {
          "faceFeaturesConfig": {
            "$ref": "#/components/schemas/FeaturesConfigUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "Frame": {
        "required": [
          "createdAt",
          "id",
          "imageDataId",
          "positionInMs",
          "receivedAt",
          "state",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/FrameState"
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionInMs": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FramePagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Frame"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FrameState": {
        "enum": [
          "New",
          "Processing",
          "Processed",
          "Error"
        ],
        "type": "string"
      },
      "GenderType": {
        "enum": [
          "Male",
          "Female"
        ],
        "type": "string"
      },
      "GroupingState": {
        "required": [
          "id",
          "numNewFrames",
          "numUnprocFrames",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "numNewFrames": {
            "type": "integer",
            "format": "int32"
          },
          "numUnprocFrames": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ProgressStatus"
          }
        },
        "additionalProperties": false
      },
      "ImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte",
            "default": ""
          }
        },
        "additionalProperties": false
      },
      "Individual": {
        "required": [
          "bestFaceId",
          "createdAt",
          "entranceTime",
          "exitTime",
          "id",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "entranceTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bestFaceId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndividualPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Individual"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Label": {
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkInputRequest": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "LiveGrouping": {
        "required": [
          "config",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LiveGroupingConfig"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingConfig": {
        "required": [
          "enabled",
          "slidingWindow",
          "step",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "step": {
            "type": "integer",
            "format": "int32"
          },
          "slidingWindow": {
            "type": "integer",
            "format": "int32"
          },
          "threshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingConfigCreateRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "step": {
            "type": "integer",
            "format": "int32",
            "default": 600,
            "nullable": true
          },
          "slidingWindow": {
            "type": "integer",
            "format": "int32",
            "default": 3600,
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true,
            "nullable": true
          },
          "step": {
            "type": "integer",
            "format": "int32",
            "default": 600
          },
          "slidingWindow": {
            "type": "integer",
            "format": "int32",
            "default": 3600
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingCreateRequest": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LiveGroupingConfigCreateRequest"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingStreams": {
        "type": "object",
        "properties": {
          "cameras": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Camera"
            },
            "nullable": true
          },
          "edgeStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeStream"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiveGroupingUpdateRequest": {
        "required": [
          "config",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LiveGroupingConfigUpdateRequest"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LivenessSpoofCheck": {
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "notPerformedReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailReason"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MergeIndividualsRequest": {
        "required": [
          "individualIds"
        ],
        "type": "object",
        "properties": {
          "individualIds": {
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "MergeIndividualsResponse": {
        "required": [
          "individualId"
        ],
        "type": "object",
        "properties": {
          "individualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ObjectAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AttributeType"
          },
          "floatValue": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "boolValue": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ObjectDetectorConfig": {
        "type": "object",
        "properties": {
          "minObjectSize": {
            "type": "number",
            "format": "double"
          },
          "maxObjectSize": {
            "type": "number",
            "format": "double"
          },
          "maxObjects": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "objectTypesConfiguration": {
            "$ref": "#/components/schemas/ObjectTypesForDetection"
          }
        },
        "additionalProperties": false
      },
      "ObjectDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minObjectSize": {
            "type": "number",
            "format": "double",
            "default": 40
          },
          "maxObjectSize": {
            "type": "number",
            "format": "double",
            "default": 2000
          },
          "maxObjects": {
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 5000
          },
          "objectTypesConfiguration": {
            "$ref": "#/components/schemas/ObjectTypesForDetection"
          }
        },
        "additionalProperties": false
      },
      "ObjectDetectorConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "minObjectSize": {
            "type": "number",
            "format": "double"
          },
          "maxObjectSize": {
            "type": "number",
            "format": "double"
          },
          "maxObjects": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "objectTypesConfiguration": {
            "$ref": "#/components/schemas/ObjectTypesForDetection"
          }
        },
        "additionalProperties": false
      },
      "ObjectInformation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "objectOrderOnFrameForType": {
            "type": "integer",
            "format": "int32"
          },
          "cropImage": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "cropCoordinates": {
            "$ref": "#/components/schemas/CropCoordinates"
          }
        },
        "additionalProperties": false
      },
      "ObjectTypesForDetection": {
        "type": "object",
        "properties": {
          "detectCar": {
            "type": "boolean",
            "default": false
          },
          "detectBus": {
            "type": "boolean",
            "default": false
          },
          "detectTruck": {
            "type": "boolean",
            "default": false
          },
          "detectMotorcycle": {
            "type": "boolean",
            "default": false
          },
          "detectBicycle": {
            "type": "boolean",
            "default": false
          },
          "detectBoat": {
            "type": "boolean",
            "default": false
          },
          "detectAirplane": {
            "type": "boolean",
            "default": false
          },
          "detectTrain": {
            "type": "boolean",
            "default": false
          },
          "detectBird": {
            "type": "boolean",
            "default": false
          },
          "detectCat": {
            "type": "boolean",
            "default": false
          },
          "detectDog": {
            "type": "boolean",
            "default": false
          },
          "detectHorse": {
            "type": "boolean",
            "default": false
          },
          "detectSheep": {
            "type": "boolean",
            "default": false
          },
          "detectCow": {
            "type": "boolean",
            "default": false
          },
          "detectBear": {
            "type": "boolean",
            "default": false
          },
          "detectElephant": {
            "type": "boolean",
            "default": false
          },
          "detectGiraffe": {
            "type": "boolean",
            "default": false
          },
          "detectZebra": {
            "type": "boolean",
            "default": false
          },
          "detectSuitcase": {
            "type": "boolean",
            "default": false
          },
          "detectBackpack": {
            "type": "boolean",
            "default": false
          },
          "detectHandbag": {
            "type": "boolean",
            "default": false
          },
          "detectUmbrella": {
            "type": "boolean",
            "default": false
          },
          "detectKnife": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "Palm": {
        "required": [
          "confidence",
          "createdAt",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "frameId",
          "id",
          "imageDataId",
          "processedAt",
          "quality",
          "side",
          "size",
          "trackletId",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "trackletId": {
            "type": "string",
            "format": "uuid"
          },
          "confidence": {
            "type": "integer",
            "format": "int32"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "side": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PalmDetectorConfig": {
        "type": "object",
        "properties": {
          "minPalmSize": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "maxPalmSize": {
            "type": "integer",
            "format": "int32",
            "default": 1200
          },
          "maxPalms": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 5000
          }
        },
        "additionalProperties": false
      },
      "PalmDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minPalmSize": {
            "type": "number",
            "format": "double",
            "default": 200,
            "nullable": true
          },
          "maxPalmSize": {
            "type": "number",
            "format": "double",
            "default": 1200,
            "nullable": true
          },
          "maxPalms": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "nullable": true
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 5000,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PalmLivenessSpoofCheck": {
        "required": [
          "passed",
          "performed",
          "score"
        ],
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PalmPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Palm"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PalmRegistrationImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "palmId": {
            "type": "string",
            "format": "uuid",
            "default": null,
            "nullable": true
          },
          "palmSide": {
            "type": "string",
            "default": "Unspecified",
            "nullable": true
          },
          "data": {
            "type": "string",
            "format": "byte",
            "default": ""
          }
        },
        "additionalProperties": false
      },
      "PalmSpoofCheckConfig": {
        "type": "object",
        "properties": {
          "livenessScoreThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 85
          }
        },
        "additionalProperties": false
      },
      "PalmSpoofCheckRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/PalmSpoofDetectorConfig"
          },
          "palmDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "liveness_any_remote"
            ]
          },
          "spoofCheckConfig": {
            "$ref": "#/components/schemas/PalmSpoofCheckConfig"
          }
        },
        "additionalProperties": false
      },
      "PalmSpoofCheckResponse": {
        "required": [
          "livenessSpoofCheck",
          "passed",
          "performed"
        ],
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "livenessSpoofCheck": {
            "$ref": "#/components/schemas/PalmLivenessSpoofCheck"
          }
        },
        "additionalProperties": false
      },
      "PalmSpoofDetectorConfig": {
        "type": "object",
        "properties": {
          "minPalmSize": {
            "type": "integer",
            "format": "int32",
            "default": 35
          },
          "maxPalmSize": {
            "type": "integer",
            "format": "int32",
            "default": 600
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 450
          }
        },
        "additionalProperties": false
      },
      "PalmWatchlistMemberLinkingRequest": {
        "required": [
          "palmId"
        ],
        "type": "object",
        "properties": {
          "palmId": {
            "type": "string",
            "format": "uuid"
          },
          "palmValidationMode": {
            "type": "string",
            "default": "predefined",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PalmWatchlistMemberRemoveRequest": {
        "required": [
          "palmId"
        ],
        "type": "object",
        "properties": {
          "palmId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Pedestrian": {
        "required": [
          "ankleLeftX",
          "ankleLeftY",
          "ankleRightX",
          "ankleRightY",
          "areaOnFrame",
          "createdAt",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "earLeftX",
          "earLeftY",
          "earRightX",
          "earRightY",
          "elbowLeftX",
          "elbowLeftY",
          "elbowRightX",
          "elbowRightY",
          "eyeLeftX",
          "eyeLeftY",
          "eyeRightX",
          "eyeRightY",
          "frameId",
          "hipLeftX",
          "hipLeftY",
          "hipRightX",
          "hipRightY",
          "id",
          "imageDataId",
          "kneeLeftX",
          "kneeLeftY",
          "kneeRightX",
          "kneeRightY",
          "neckX",
          "neckY",
          "noseX",
          "noseY",
          "objectAttributes",
          "objectOrderOnFrameForType",
          "objectsOnFrameCountForType",
          "poses",
          "processedAt",
          "quality",
          "shoulderLeftX",
          "shoulderLeftY",
          "shoulderRightX",
          "shoulderRightY",
          "size",
          "streamId",
          "trackletId",
          "updatedAt",
          "wristLeftX",
          "wristLeftY",
          "wristRightX",
          "wristRightY"
        ],
        "type": "object",
        "properties": {
          "trackletId": {
            "type": "string",
            "format": "uuid"
          },
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "streamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "imageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "areaOnFrame": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "objectOrderOnFrameForType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "objectsOnFrameCountForType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "poses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "earLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "earRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "eyeRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "neckX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "neckY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shoulderRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "elbowRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wristRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hipRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "kneeRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleLeftX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleLeftY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleRightX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ankleRightY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "objectAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectAttribute"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PedestrianDetectorConfigCreateRequest": {
        "type": "object",
        "properties": {
          "minPedestrianSize": {
            "type": "number",
            "format": "double",
            "default": 80,
            "nullable": true
          },
          "maxPedestrianSize": {
            "type": "number",
            "format": "double",
            "default": 2000,
            "nullable": true
          },
          "maxPedestrians": {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "nullable": true
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 2500,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PedestrianInformation": {
        "type": "object",
        "properties": {
          "pedestrianOrder": {
            "type": "integer",
            "format": "int32"
          },
          "cropImage": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "cropCoordinates": {
            "$ref": "#/components/schemas/CropCoordinates"
          }
        },
        "additionalProperties": false
      },
      "PedestrianPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pedestrian"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewAttributesConfig": {
        "required": [
          "age",
          "brightness",
          "faceMaskConfidence",
          "faceMaskStatus",
          "gender",
          "glassStatus",
          "heavyFrame",
          "matchingScore",
          "order",
          "pitchAngle",
          "quality",
          "rollAngle",
          "sharpness",
          "size",
          "templateQuality",
          "textFontSize",
          "tintedGlasses",
          "watchlistMemberId",
          "watchlistMemberName",
          "watchlistName",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "textFontSize": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "boolean"
          },
          "size": {
            "type": "boolean"
          },
          "quality": {
            "type": "boolean"
          },
          "yawAngle": {
            "type": "boolean"
          },
          "pitchAngle": {
            "type": "boolean"
          },
          "rollAngle": {
            "type": "boolean"
          },
          "watchlistMemberId": {
            "type": "boolean"
          },
          "watchlistMemberName": {
            "type": "boolean"
          },
          "watchlistName": {
            "type": "boolean"
          },
          "matchingScore": {
            "type": "boolean"
          },
          "age": {
            "type": "boolean"
          },
          "gender": {
            "type": "boolean"
          },
          "templateQuality": {
            "type": "boolean"
          },
          "faceMaskStatus": {
            "type": "boolean"
          },
          "faceMaskConfidence": {
            "type": "boolean"
          },
          "sharpness": {
            "type": "boolean"
          },
          "brightness": {
            "type": "boolean"
          },
          "tintedGlasses": {
            "type": "boolean"
          },
          "heavyFrame": {
            "type": "boolean"
          },
          "glassStatus": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PreviewAttributesConfigCreateRequest": {
        "type": "object",
        "properties": {
          "textFontSize": {
            "type": "integer",
            "format": "int32",
            "default": 12
          },
          "order": {
            "type": "boolean",
            "default": false
          },
          "size": {
            "type": "boolean",
            "default": false
          },
          "quality": {
            "type": "boolean",
            "default": false
          },
          "yawAngle": {
            "type": "boolean",
            "default": false
          },
          "pitchAngle": {
            "type": "boolean",
            "default": false
          },
          "rollAngle": {
            "type": "boolean",
            "default": false
          },
          "watchlistMemberId": {
            "type": "boolean",
            "default": false
          },
          "watchlistMemberName": {
            "type": "boolean",
            "default": true
          },
          "watchlistName": {
            "type": "boolean",
            "default": false
          },
          "matchingScore": {
            "type": "boolean",
            "default": false
          },
          "age": {
            "type": "boolean",
            "default": true
          },
          "gender": {
            "type": "boolean",
            "default": true
          },
          "templateQuality": {
            "type": "boolean",
            "default": false
          },
          "faceMaskStatus": {
            "type": "boolean",
            "default": false
          },
          "faceMaskConfidence": {
            "type": "boolean",
            "default": false
          },
          "sharpness": {
            "type": "boolean",
            "default": false
          },
          "brightness": {
            "type": "boolean",
            "default": false
          },
          "tintedGlasses": {
            "type": "boolean",
            "default": false
          },
          "heavyFrame": {
            "type": "boolean",
            "default": false
          },
          "glassStatus": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "PreviewAttributesConfigUpdateRequest": {
        "required": [
          "age",
          "faceMaskConfidence",
          "faceMaskStatus",
          "gender",
          "matchingScore",
          "order",
          "pitchAngle",
          "quality",
          "rollAngle",
          "size",
          "templateQuality",
          "textFontSize",
          "watchlistMemberId",
          "watchlistMemberName",
          "watchlistName",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "textFontSize": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "boolean"
          },
          "size": {
            "type": "boolean"
          },
          "quality": {
            "type": "boolean"
          },
          "yawAngle": {
            "type": "boolean"
          },
          "pitchAngle": {
            "type": "boolean"
          },
          "rollAngle": {
            "type": "boolean"
          },
          "watchlistMemberId": {
            "type": "boolean"
          },
          "watchlistMemberName": {
            "type": "boolean"
          },
          "watchlistName": {
            "type": "boolean"
          },
          "matchingScore": {
            "type": "boolean"
          },
          "age": {
            "type": "boolean"
          },
          "gender": {
            "type": "boolean"
          },
          "templateQuality": {
            "type": "boolean"
          },
          "faceMaskStatus": {
            "type": "boolean"
          },
          "faceMaskConfidence": {
            "type": "boolean"
          },
          "sharpness": {
            "type": "boolean",
            "nullable": true
          },
          "brightness": {
            "type": "boolean",
            "nullable": true
          },
          "tintedGlasses": {
            "type": "boolean",
            "nullable": true
          },
          "heavyFrame": {
            "type": "boolean",
            "nullable": true
          },
          "glassStatus": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewConfig": {
        "required": [
          "faceBoundingBoxColor",
          "pedestrianBoundingBoxColor"
        ],
        "type": "object",
        "properties": {
          "faceBoundingBoxColor": {
            "type": "string"
          },
          "pedestrianBoundingBoxColor": {
            "type": "string"
          },
          "objectBoundingBoxColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProgressStatus": {
        "enum": [
          "Processing",
          "Ready"
        ],
        "type": "string"
      },
      "RecordGrouping": {
        "required": [
          "config",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/RecordGroupingConfig"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingConfig": {
        "required": [
          "threshold"
        ],
        "type": "object",
        "properties": {
          "threshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingConfigCreateRequest": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordGroupingCreateRequest": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/RecordGroupingConfigCreateRequest"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterWatchlistMemberRequest": {
        "required": [
          "id",
          "images",
          "watchlistIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "default": ""
          },
          "images": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationImageData"
            }
          },
          "watchlistIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "sample_watchlist_id"
            ]
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "keepAutoLearnPhotos": {
            "type": "boolean",
            "default": false
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "default": null,
            "nullable": true
          },
          "faceValidationMode": {
            "type": "string",
            "default": "predefined",
            "nullable": true
          },
          "palmValidationMode": {
            "type": "string",
            "default": "predefined",
            "nullable": true
          },
          "palmDetectorResourceId": {
            "type": "string",
            "default": "cpu",
            "nullable": true
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/PalmDetectorConfig"
          }
        },
        "additionalProperties": false
      },
      "RegistrationImageData": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "modality": {
            "type": "string",
            "default": "Face",
            "nullable": true
          },
          "palmSide": {
            "type": "string",
            "default": "Unspecified",
            "nullable": true
          },
          "faceId": {
            "type": "string",
            "format": "uuid",
            "default": null,
            "nullable": true
          },
          "palmId": {
            "type": "string",
            "format": "uuid",
            "default": null,
            "nullable": true
          },
          "data": {
            "type": "string",
            "format": "byte",
            "default": ""
          }
        },
        "additionalProperties": false
      },
      "SearchByImageSpoofResult": {
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "distantLivenessSpoofCheck": {
            "$ref": "#/components/schemas/WatchlistLivenessSpoofCheck"
          },
          "nearbyLivenessSpoofCheck": {
            "$ref": "#/components/schemas/WatchlistLivenessSpoofCheck"
          }
        },
        "additionalProperties": false
      },
      "SearchByPalmInWatchlistByTemplateRequest": {
        "required": [
          "template"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "format": "byte"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "sample_watchlist_id"
            ],
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40
          },
          "maxResultCount": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "SearchByPalmInWatchlistByTemplateResponse": {
        "required": [
          "matchResults"
        ],
        "type": "object",
        "properties": {
          "matchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchByPalmInWatchlistRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "sample_watchlist_id"
            ],
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40
          },
          "maxResultCount": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "palmDetectorConfig": {
            "$ref": "#/components/schemas/PalmDetectorConfig"
          },
          "palmDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ]
          },
          "spoofCheckConfig": {
            "$ref": "#/components/schemas/PalmSpoofCheckConfig"
          },
          "palmValidationMode": {
            "type": "string",
            "default": "none",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchByPalmInWatchlistResponse": {
        "required": [
          "confidence",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "matchResults",
          "quality",
          "size",
          "spoofCheckResult"
        ],
        "type": "object",
        "properties": {
          "matchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "spoofCheckResult": {
            "$ref": "#/components/schemas/PalmSpoofCheckResponse"
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "size": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SearchInFacesResponse": {
        "required": [
          "searchSessionId"
        ],
        "type": "object",
        "properties": {
          "searchSessionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SearchInIndividualsRequest": {
        "required": [
          "groupingId",
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "groupingId": {
            "type": "string",
            "format": "uuid"
          },
          "matchThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          },
          "templateGeneratorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SearchInIndividualsResponse": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Individual"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistByTemplateRequest": {
        "required": [
          "template"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "format": "byte"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "sample_watchlist_id"
            ],
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40
          },
          "maxResultCount": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistByTemplateResponse": {
        "required": [
          "matchResults"
        ],
        "type": "object",
        "properties": {
          "matchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "watchlistIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "sample_watchlist_id"
            ],
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "default": 40
          },
          "maxResultCount": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "faceMaskConfidenceRequest": {
            "$ref": "#/components/schemas/FaceMaskConfidenceRequest"
          },
          "faceFeaturesConfig": {
            "$ref": "#/components/schemas/WatchlistSearchFaceFeaturesRequestConfig"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "none"
            ]
          },
          "spoofCheckConfig": {
            "$ref": "#/components/schemas/WatchlistSpoofCheckConfig"
          },
          "faceValidationMode": {
            "type": "string",
            "default": "none",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInWatchlistResponse": {
        "required": [
          "age",
          "brightness",
          "cropLeftBottomX",
          "cropLeftBottomY",
          "cropLeftTopX",
          "cropLeftTopY",
          "cropRightBottomX",
          "cropRightBottomY",
          "cropRightTopX",
          "cropRightTopY",
          "faceArea",
          "faceMaskConfidence",
          "faceMaskStatus",
          "faceOrder",
          "faceSize",
          "gender",
          "glassStatus",
          "heavyFrame",
          "leftEyeX",
          "leftEyeY",
          "matchResults",
          "noseTipConfidence",
          "pitchAngle",
          "quality",
          "rightEyeX",
          "rightEyeY",
          "rollAngle",
          "sharpness",
          "spoofCheckResult",
          "templateQuality",
          "tintedGlasses",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "matchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "spoofCheckResult": {
            "$ref": "#/components/schemas/SearchByImageSpoofResult"
          },
          "cropLeftTopX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftTopY": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopX": {
            "type": "number",
            "format": "double"
          },
          "cropRightTopY": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropLeftBottomY": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomX": {
            "type": "number",
            "format": "double"
          },
          "cropRightBottomY": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "integer",
            "format": "int32"
          },
          "leftEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leftEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeX": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rightEyeY": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "age": {
            "type": "number",
            "format": "double"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderType"
          },
          "faceSize": {
            "type": "number",
            "format": "double"
          },
          "faceMaskConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "noseTipConfidence": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceMaskStatus": {
            "$ref": "#/components/schemas/FaceMaskStatus"
          },
          "sharpness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "brightness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tintedGlasses": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "heavyFrame": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "glassStatus": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pitchAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "yawAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rollAngle": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceArea": {
            "type": "number",
            "format": "double"
          },
          "templateQuality": {
            "type": "integer",
            "format": "int32"
          },
          "faceOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SearchResult": {
        "required": [
          "displayName",
          "fullName",
          "labels",
          "previewColor",
          "score",
          "watchlistDisplayName",
          "watchlistFullName",
          "watchlistId",
          "watchlistMemberId"
        ],
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "watchlistMemberId": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "watchlistDisplayName": {
            "type": "string"
          },
          "watchlistFullName": {
            "type": "string"
          },
          "watchlistId": {
            "type": "string",
            "nullable": true
          },
          "previewColor": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchSessionsCleanupConfig": {
        "required": [
          "enabled",
          "interval",
          "maxItemsCount",
          "maxSessionAge"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "maxItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxSessionAge": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SplitIndividualsRequest": {
        "required": [
          "previousIndividualId",
          "trackletsIds"
        ],
        "type": "object",
        "properties": {
          "trackletsIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "previousIndividualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SplitIndividualsResponse": {
        "required": [
          "individualId"
        ],
        "type": "object",
        "properties": {
          "individualId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SpoofCheckConfig": {
        "type": "object",
        "properties": {
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90
          },
          "distantLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "keepEvaluatingConditionsAfterFirstFail": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SpoofCheckRequest": {
        "required": [
          "image"
        ],
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceSearchDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "default": "cpu"
          },
          "spoofDetectorResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "liveness_distant_cpu_remote"
            ]
          },
          "spoofCheckConfig": {
            "$ref": "#/components/schemas/SpoofCheckConfig"
          }
        },
        "additionalProperties": false
      },
      "SpoofCheckResponse": {
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "distantLivenessSpoofCheck": {
            "$ref": "#/components/schemas/LivenessSpoofCheck"
          },
          "nearbyLivenessSpoofCheck": {
            "$ref": "#/components/schemas/LivenessSpoofCheck"
          }
        },
        "additionalProperties": false
      },
      "SpoofDetectorConfig": {
        "required": [
          "distantLivenessConditions",
          "distantLivenessScoreThreshold",
          "nearbyLivenessConditions",
          "nearbyLivenessScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "distantLivenessConditions": {
            "type": "string"
          },
          "nearbyLivenessConditions": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TotpSecretResponse": {
        "required": [
          "algorithm",
          "digits",
          "issuer",
          "period",
          "secret",
          "watchlistMemberIdentifier"
        ],
        "type": "object",
        "properties": {
          "secret": {
            "type": "string"
          },
          "digits": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "algorithm": {
            "type": "string"
          },
          "watchlistMemberIdentifier": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Tracklet": {
        "required": [
          "createdAt",
          "id",
          "timeAppeared",
          "timeAppearedRelativeMs",
          "timeDisappeared",
          "timeDisappearedRelativeMs",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "timeAppeared": {
            "type": "string",
            "format": "date-time"
          },
          "timeDisappeared": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timeAppearedRelativeMs": {
            "type": "integer",
            "format": "int64"
          },
          "timeDisappearedRelativeMs": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrackletPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tracklet"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadedImageRequest": {
        "required": [
          "imageData"
        ],
        "type": "object",
        "properties": {
          "imageData": {
            "$ref": "#/components/schemas/ImageData"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UploadedImageResponse": {
        "required": [
          "frameId",
          "frameImageDataId"
        ],
        "type": "object",
        "properties": {
          "frameId": {
            "type": "string",
            "format": "uuid"
          },
          "frameImageDataId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerificationRequest": {
        "required": [
          "probeImage",
          "referenceImage"
        ],
        "type": "object",
        "properties": {
          "probeImage": {
            "$ref": "#/components/schemas/FaceProbe"
          },
          "referenceImage": {
            "$ref": "#/components/schemas/FaceProbe"
          }
        },
        "additionalProperties": false
      },
      "VerificationResponse": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "probeFaceDetails": {
            "$ref": "#/components/schemas/FaceAttributes"
          },
          "referenceFaceDetails": {
            "$ref": "#/components/schemas/FaceAttributes"
          }
        },
        "additionalProperties": false
      },
      "VersionInfo": {
        "required": [
          "assemblyLastModifiedTime",
          "assemblyVersion",
          "databaseVersion",
          "databaseVersionCreationTime",
          "databaseVersionUpdatedTime",
          "fullVersion"
        ],
        "type": "object",
        "properties": {
          "databaseVersion": {
            "type": "string"
          },
          "databaseVersionCreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "databaseVersionUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "assemblyVersion": {
            "type": "string"
          },
          "assemblyLastModifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "fullVersion": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VideoDataStorageConfig": {
        "required": [
          "storageMode"
        ],
        "type": "object",
        "properties": {
          "storageMode": {
            "$ref": "#/components/schemas/VideoDataStorageMode"
          }
        },
        "additionalProperties": false
      },
      "VideoDataStorageMode": {
        "enum": [
          "None",
          "All"
        ],
        "type": "string"
      },
      "VideoFaceDetectorConfig": {
        "required": [
          "confidenceThreshold",
          "maxFaces",
          "maxFaceSize",
          "minFaceSize"
        ],
        "type": "object",
        "properties": {
          "minFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 35
          },
          "maxFaceSize": {
            "type": "integer",
            "format": "int32",
            "default": 600
          },
          "maxFaces": {
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32",
            "default": 450
          }
        },
        "additionalProperties": false
      },
      "VideoPalmDetectorConfig": {
        "required": [
          "confidenceThreshold",
          "maxPalms",
          "maxPalmSize",
          "minPalmSize"
        ],
        "type": "object",
        "properties": {
          "minPalmSize": {
            "type": "number",
            "format": "double"
          },
          "maxPalmSize": {
            "type": "number",
            "format": "double"
          },
          "maxPalms": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoPedestrianDetectorConfig": {
        "required": [
          "confidenceThreshold",
          "maxPedestrians",
          "maxPedestrianSize",
          "minPedestrianSize"
        ],
        "type": "object",
        "properties": {
          "minPedestrianSize": {
            "type": "number",
            "format": "double"
          },
          "maxPedestrianSize": {
            "type": "number",
            "format": "double"
          },
          "maxPedestrians": {
            "type": "integer",
            "format": "int32"
          },
          "confidenceThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoRecord": {
        "required": [
          "description",
          "enabled",
          "faceDetectorConfig",
          "faceDetectorResourceId",
          "faceSaveStrategy",
          "id",
          "imageQuality",
          "maskImagePath",
          "matchingConfig",
          "mpeG1PreviewEnabled",
          "mpeG1PreviewPort",
          "mpeG1VideoBitrate",
          "name",
          "previewMaxDimension",
          "processingDurationMs",
          "processingStartTime",
          "recordedAt",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "state",
          "templateGenerationTime",
          "templateGeneratorResourceId",
          "trackMotionOptimization",
          "videoDurationMs"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/VideoState"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "recordedAt": {
            "type": "string",
            "format": "date-time"
          },
          "videoDurationMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string",
            "deprecated": true
          },
          "faceSaveStrategy": {
            "type": "string"
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "matchingConfig": {
            "$ref": "#/components/schemas/VideoRecordMatchingConfig"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "processingStartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processingDurationMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoRecordCreateRequest": {
        "required": [
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "source": {
            "minLength": 1,
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "recordedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/FaceDetectorConfigCreateRequest"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "trackMotionOptimization": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "faceSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean",
            "nullable": true
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "matchingConfig": {
            "$ref": "#/components/schemas/VideoRecordMatchingConfigCreateRequest"
          },
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoRecordMatchingConfig": {
        "required": [
          "matchDetectedFaces",
          "maxResultsCount"
        ],
        "type": "object",
        "properties": {
          "matchDetectedFaces": {
            "type": "boolean"
          },
          "maxResultsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoRecordMatchingConfigCreateRequest": {
        "type": "object",
        "properties": {
          "matchDetectedFaces": {
            "type": "boolean",
            "nullable": true
          },
          "maxResultsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoRecordMatchingConfigUpdateRequest": {
        "required": [
          "matchDetectedFaces",
          "maxResultsCount"
        ],
        "type": "object",
        "properties": {
          "matchDetectedFaces": {
            "type": "boolean"
          },
          "maxResultsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoRecordTags": {
        "required": [
          "id",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "VideoRecordTagsUpdateRequest": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "VideoRecordUpdateRequest": {
        "required": [
          "enabled",
          "faceDetectorConfig",
          "id",
          "imageQuality",
          "maskImagePath",
          "name",
          "redetectionTime",
          "saveFrameImageData",
          "source",
          "templateGenerationTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "recordedAt": {
            "type": "string",
            "format": "date-time"
          },
          "faceDetectorConfig": {
            "$ref": "#/components/schemas/VideoFaceDetectorConfig"
          },
          "faceDetectorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "templateGeneratorResourceId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "redetectionTime": {
            "type": "integer",
            "format": "int32"
          },
          "templateGenerationTime": {
            "type": "integer",
            "format": "int32"
          },
          "trackMotionOptimization": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "faceSaveStrategy": {
            "type": "string",
            "nullable": true
          },
          "maskImagePath": {
            "type": "string",
            "nullable": true
          },
          "saveFrameImageData": {
            "type": "boolean"
          },
          "imageQuality": {
            "type": "integer",
            "format": "int32"
          },
          "mpeG1PreviewEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "mpeG1PreviewPort": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "mpeG1VideoBitrate": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "previewMaxDimension": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "matchingConfig": {
            "$ref": "#/components/schemas/VideoRecordMatchingConfigUpdateRequest"
          },
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoState": {
        "enum": [
          "Ready",
          "Processing",
          "Processed",
          "Error"
        ],
        "type": "string"
      },
      "Watchlist": {
        "required": [
          "createdAt",
          "displayName",
          "fullName",
          "id",
          "palmThreshold",
          "previewColor",
          "threshold",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "threshold": {
            "type": "integer",
            "format": "int32"
          },
          "palmThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "previewColor": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistAutoLearnConfig": {
        "required": [
          "enabled",
          "executionStartTime",
          "maxAutoLearnFacesCount",
          "selectionThreshold"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "executionStartTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "maxAutoLearnFacesCount": {
            "type": "integer",
            "format": "int32"
          },
          "selectionThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "maskedSelectionThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "noFaceMaskConfidenceThreshold": {
            "type": "number",
            "format": "double"
          },
          "faceMaskConfidenceThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "WatchlistCreateRequest": {
        "required": [
          "displayName",
          "fullName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "threshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "palmThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previewColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistLivenessSpoofCheck": {
        "type": "object",
        "properties": {
          "performed": {
            "type": "boolean"
          },
          "passed": {
            "type": "boolean"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "notPerformedReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailReason"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMember": {
        "required": [
          "createdAt",
          "displayName",
          "fullName",
          "id",
          "labels",
          "note",
          "totpEnabled",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "totpEnabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberCreateRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WatchlistMember"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberUpsertRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMemberWithRelatedData": {
        "required": [
          "createdAt",
          "displayName",
          "faces",
          "fullName",
          "id",
          "labels",
          "note",
          "totpEnabled",
          "updatedAt",
          "watchlists"
        ],
        "type": "object",
        "properties": {
          "watchlists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Watchlist"
            }
          },
          "faces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Face"
            }
          },
          "palms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Palm"
            },
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "totpEnabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistMembersLinkRequest": {
        "required": [
          "watchlistId",
          "watchlistMembersIds"
        ],
        "type": "object",
        "properties": {
          "watchlistId": {
            "minLength": 1,
            "type": "string"
          },
          "watchlistMembersIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "WatchlistPagedCollection": {
        "required": [
          "items",
          "nextPage",
          "pageNumber",
          "pageSize",
          "previousPage",
          "totalItemsCount"
        ],
        "type": "object",
        "properties": {
          "totalItemsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Watchlist"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistSearchFaceFeaturesRequestConfig": {
        "required": [
          "age",
          "faceMask",
          "gender",
          "noseTip",
          "pitchAngle",
          "rollAngle",
          "yawAngle"
        ],
        "type": "object",
        "properties": {
          "age": {
            "type": "boolean",
            "default": true
          },
          "gender": {
            "type": "boolean",
            "default": true
          },
          "faceMask": {
            "type": "boolean",
            "default": true
          },
          "noseTip": {
            "type": "boolean",
            "default": true
          },
          "yawAngle": {
            "type": "boolean",
            "default": true
          },
          "pitchAngle": {
            "type": "boolean",
            "default": true
          },
          "rollAngle": {
            "type": "boolean",
            "default": true
          },
          "sharpness": {
            "type": "boolean",
            "default": true
          },
          "brightness": {
            "type": "boolean",
            "default": true
          },
          "tintedGlasses": {
            "type": "boolean",
            "default": true
          },
          "heavyFrame": {
            "type": "boolean",
            "default": true
          },
          "glassStatus": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "WatchlistSpoofCheckConfig": {
        "type": "object",
        "properties": {
          "distantLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90
          },
          "nearbyLivenessScoreThreshold": {
            "type": "number",
            "format": "double",
            "default": 90
          },
          "distantLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "nearbyLivenessConditions": {
            "type": "string",
            "default": "default",
            "nullable": true
          },
          "keepEvaluatingConditionsAfterFirstFail": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "WatchlistUpsertRequest": {
        "required": [
          "displayName",
          "fullName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "displayName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "fullName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "threshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "palmThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previewColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}