services:
  sf-base:
    extends:
      service: common-rabbitmq-db-s3-scrapeMetrics
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-base:${SF_VERSION}
    command: --serviceName SFBase
    ports:
      - 2406:2406

  sf-group:
    extends:
      service: common-rabbitmq-db-s3-scrapeMetrics
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-grouping:${SF_VERSION}
    command: --serviceName SFGroup

  sf-streamdatadbworker:
    extends:
      service: common-rabbitmq-db-s3-scrapeMetrics
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-streamdatadbworker:${SF_VERSION}

  sf-cam-1:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    command: --serviceName SFCam1
    ports:
      - 30001:${CameraDefaults__PreviewPort}

  sf-cam-2:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    command: --serviceName SFCam2
    ports:
      - 30002:${CameraDefaults__PreviewPort}

  sf-cam-3:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    command: --serviceName SFCam3
    ports:
      - 30003:${CameraDefaults__PreviewPort}

  sf-cam-4:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    command: --serviceName SFCam4
    ports:
      - 30004:${CameraDefaults__PreviewPort}

  sf-cam-5:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    command: --serviceName SFCam5
    ports:
      - 30005:${CameraDefaults__PreviewPort}

  sf-cam-nx:
    extends:
      service: sf-cam
      file: docker-compose-common.yml
    # Guid needs to match ServiceInstallNames.NX_TEST_CAMERA_GUID
    command: --serviceName 53b4d78e-323f-4a0f-aa6d-99c464448b6d
    #environment:
    #  Gpu__GpuNeuralRuntime: Tensor
    #volumes:
    # - "/var/tmp/innovatrics/tensor-rt:/var/tmp/innovatrics/tensor-rt"
    #runtime: nvidia

  api:
    extends:
      service: common-rabbitmq-db-s3-scrapeMetrics
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-api:${SF_VERSION}
    ports:
      # we forward the configured ports to default SF ports
      - 8098:${Hosting__Port}
    environment:
      MQTT__Hostname:
      MQTT__Username:
      MQTT__Password:
      MQTT__Port:
      MQTT__UseSsl:
      Hosting__Host:
      Hosting__Port:
      CameraDefaults__PreviewPort:

  sf-graphql-api:
    extends:
      service: common-rabbitmq-db
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-graphql-api:${SF_VERSION}
    labels:
      scrapeMetrics: true
    ports:
      # we forward the configured ports to default SF ports
      - 8097:${Hosting__Port}
    expose:
      - 4318
    environment:
      MQTT__Hostname:
      MQTT__Username:
      MQTT__Password:
      MQTT__Port:
      MQTT__UseSsl:
      Hosting__Host:
      Hosting__Port:

  odata-api:
    extends:
      service: common-rabbitmq-db-s3-scrapeMetrics
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-odata-api:${SF_VERSION}
    ports:
      # we forward the configured ports to default SF ports
      - 8099:${Hosting__Port}
    environment:
      Hosting__Host:
      Hosting__Port:

  detector:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-detector:${SF_VERSION}
    #environment:
    # Gpu__GpuEnabled: true
    # Gpu__GpuNeuralRuntime: Tensor
    #volumes:
    # - "/var/tmp/innovatrics/tensor-rt:/var/tmp/innovatrics/tensor-rt"
    #runtime: nvidia

  pedestrian-detector:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-pedestrian-detector:${SF_VERSION}
    #environment:
    # Gpu__GpuEnabled: true
    # Gpu__GpuNeuralRuntime: Tensor
    #volumes:
    # - "/var/tmp/innovatrics/tensor-rt:/var/tmp/innovatrics/tensor-rt"
    #runtime: nvidia

  object-detector:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-object-detector:${SF_VERSION}
    #environment:
    # Gpu__GpuEnabled: true
    #runtime: nvidia

  pedestrian-extractor:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-pedestrian-extractor:${SF_VERSION}
    #environment:
    # Gpu__GpuEnabled: true
    #runtime: nvidia

  extractor:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-extractor:${SF_VERSION}
    labels:
      scrapeMetrics: true
    expose:
      - 4318
    #environment:
    # Gpu__GpuEnabled: true
    # Gpu__GpuNeuralRuntime: Tensor
    #volumes:
    # - "/var/tmp/innovatrics/tensor-rt:/var/tmp/innovatrics/tensor-rt"
    #runtime: nvidia

  matcher:
    extends:
      service: common-rabbitmq-db
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-matcher:${SF_VERSION}
    cpuset: "0"

  face-matcher:
    extends:
      service: common-rabbitmq-db
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-face-matcher:${SF_VERSION}

  liveness:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-liveness:${SF_VERSION}
    labels:
      scrapeMetrics: true
    expose:
      - 4318
    #environment:
    #   - Gpu__GpuEnabled=true
    #   - Gpu__GpuNeuralRuntime=Tensor
    #volumes:
    # - "/var/tmp/innovatrics/tensor-rt:/var/tmp/innovatrics/tensor-rt"
    #runtime: nvidia

  video-aggregator:
    extends:
      service: common-rabbitmq-db-s3
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-video-aggregator:${SF_VERSION}

  video-collector:
    extends:
      service: common-rabbitmq-db-s3
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-video-collector:${SF_VERSION}

  video-reader:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-video-reader:${SF_VERSION}
    labels:
      scrapeMetrics: true
    expose:
      - 4318
    environment:
      S3Bucket__Endpoint:
      S3Bucket__BucketName:
      S3Bucket__AccessKey:
      S3Bucket__SecretKey:

  edge-stream-processor:
    extends:
      service: common-rabbitmq-db
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-edge-stream-processor:${SF_VERSION}
    environment:
      - NoSqlDataStorageDisabled

  edge-streams-state-synchronizer:
    extends:
      service: common-rabbitmq-db
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-edge-streams-state-synchronizer:${SF_VERSION}
    environment:
      MQTT__Hostname:
      MQTT__Username:
      MQTT__Password:
      MQTT__Port:
      MQTT__UseSsl:
      Rpc__TimeoutMs:

  access-controller:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-access-controller:${AC_VERSION}
    ports:
      # we forward the configured ports to default SF ports
      - 5050:${Hosting__Port}
    environment:
      MQTT__Hostname:
      MQTT__Username:
      MQTT__Password:
      MQTT__Port:
      MQTT__UseSsl:
      Kestrel__EndPoints__Http__Url: ${Hosting__Host}:${Hosting__Port}
    env_file: .env.sfac

  sf-station:
    extends:
      service: common
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-station:${SFS_VERSION}
    ports:
      - 8000:8000
    env_file: .env.sfstation

  db-synchronization-leader:
    extends:
      service: common-rabbitmq
      file: docker-compose-common.yml
    image: ${REGISTRY}sf-db-synchronization-leader:${SF_VERSION}
    ports:
      - 8100:${Hosting__Port}
    environment:
      Hosting__Host:
      Hosting__Port:
      S3Bucket__Endpoint:
      S3Bucket__BucketName:
      S3Bucket__AccessKey:
      S3Bucket__SecretKey:
      Authentication__UseAuthentication:
      Authentication__IgnoreHttpsIssuerCheck:
      Authentication__Authority:
      Authentication__Audience:

networks:
  default:
    name: sf-network
    external: true
